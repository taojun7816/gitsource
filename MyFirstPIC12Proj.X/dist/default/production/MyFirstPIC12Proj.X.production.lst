

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 03 22:41:33 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 1.45
    40                           ; Generated 16/11/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC12F1822 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  008C                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  010C                     	;# 
   114  0111                     	;# 
   115  0112                     	;# 
   116  0115                     	;# 
   117  0116                     	;# 
   118  0117                     	;# 
   119  0118                     	;# 
   120  0119                     	;# 
   121  011A                     	;# 
   122  011B                     	;# 
   123  011D                     	;# 
   124  011D                     	;# 
   125  018C                     	;# 
   126  0191                     	;# 
   127  0191                     	;# 
   128  0192                     	;# 
   129  0193                     	;# 
   130  0193                     	;# 
   131  0193                     	;# 
   132  0194                     	;# 
   133  0195                     	;# 
   134  0196                     	;# 
   135  0199                     	;# 
   136  019A                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019C                     	;# 
   142  019C                     	;# 
   143  019D                     	;# 
   144  019E                     	;# 
   145  019F                     	;# 
   146  020C                     	;# 
   147  0211                     	;# 
   148  0211                     	;# 
   149  0212                     	;# 
   150  0212                     	;# 
   151  0213                     	;# 
   152  0213                     	;# 
   153  0214                     	;# 
   154  0214                     	;# 
   155  0215                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0216                     	;# 
   159  0216                     	;# 
   160  0217                     	;# 
   161  0217                     	;# 
   162  0291                     	;# 
   163  0291                     	;# 
   164  0292                     	;# 
   165  0293                     	;# 
   166  0294                     	;# 
   167  0295                     	;# 
   168  0295                     	;# 
   169  0296                     	;# 
   170  0391                     	;# 
   171  0392                     	;# 
   172  0393                     	;# 
   173  039A                     	;# 
   174  039C                     	;# 
   175  039D                     	;# 
   176  039E                     	;# 
   177  039F                     	;# 
   178  0FE4                     	;# 
   179  0FE5                     	;# 
   180  0FE6                     	;# 
   181  0FE7                     	;# 
   182  0FE8                     	;# 
   183  0FE9                     	;# 
   184  0FEA                     	;# 
   185  0FEB                     	;# 
   186  0FED                     	;# 
   187  0FEE                     	;# 
   188  0FEF                     	;# 
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0008                     	;# 
   198  0009                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  0011                     	;# 
   203  0012                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0016                     	;# 
   207  0017                     	;# 
   208  0018                     	;# 
   209  0019                     	;# 
   210  001A                     	;# 
   211  001B                     	;# 
   212  001C                     	;# 
   213  001E                     	;# 
   214  001F                     	;# 
   215  008C                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0095                     	;# 
   219  0096                     	;# 
   220  0097                     	;# 
   221  0098                     	;# 
   222  0099                     	;# 
   223  009A                     	;# 
   224  009B                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  010C                     	;# 
   230  0111                     	;# 
   231  0112                     	;# 
   232  0115                     	;# 
   233  0116                     	;# 
   234  0117                     	;# 
   235  0118                     	;# 
   236  0119                     	;# 
   237  011A                     	;# 
   238  011B                     	;# 
   239  011D                     	;# 
   240  011D                     	;# 
   241  018C                     	;# 
   242  0191                     	;# 
   243  0191                     	;# 
   244  0192                     	;# 
   245  0193                     	;# 
   246  0193                     	;# 
   247  0193                     	;# 
   248  0194                     	;# 
   249  0195                     	;# 
   250  0196                     	;# 
   251  0199                     	;# 
   252  019A                     	;# 
   253  019B                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019C                     	;# 
   258  019C                     	;# 
   259  019D                     	;# 
   260  019E                     	;# 
   261  019F                     	;# 
   262  020C                     	;# 
   263  0211                     	;# 
   264  0211                     	;# 
   265  0212                     	;# 
   266  0212                     	;# 
   267  0213                     	;# 
   268  0213                     	;# 
   269  0214                     	;# 
   270  0214                     	;# 
   271  0215                     	;# 
   272  0215                     	;# 
   273  0215                     	;# 
   274  0216                     	;# 
   275  0216                     	;# 
   276  0217                     	;# 
   277  0217                     	;# 
   278  0291                     	;# 
   279  0291                     	;# 
   280  0292                     	;# 
   281  0293                     	;# 
   282  0294                     	;# 
   283  0295                     	;# 
   284  0295                     	;# 
   285  0296                     	;# 
   286  0391                     	;# 
   287  0392                     	;# 
   288  0393                     	;# 
   289  039A                     	;# 
   290  039C                     	;# 
   291  039D                     	;# 
   292  039E                     	;# 
   293  039F                     	;# 
   294  0FE4                     	;# 
   295  0FE5                     	;# 
   296  0FE6                     	;# 
   297  0FE7                     	;# 
   298  0FE8                     	;# 
   299  0FE9                     	;# 
   300  0FEA                     	;# 
   301  0FEB                     	;# 
   302  0FED                     	;# 
   303  0FEE                     	;# 
   304  0FEF                     	;# 
   305  0000                     	;# 
   306  0001                     	;# 
   307  0002                     	;# 
   308  0003                     	;# 
   309  0004                     	;# 
   310  0005                     	;# 
   311  0006                     	;# 
   312  0007                     	;# 
   313  0008                     	;# 
   314  0009                     	;# 
   315  000A                     	;# 
   316  000B                     	;# 
   317  000C                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001E                     	;# 
   330  001F                     	;# 
   331  008C                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0095                     	;# 
   335  0096                     	;# 
   336  0097                     	;# 
   337  0098                     	;# 
   338  0099                     	;# 
   339  009A                     	;# 
   340  009B                     	;# 
   341  009B                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009E                     	;# 
   345  010C                     	;# 
   346  0111                     	;# 
   347  0112                     	;# 
   348  0115                     	;# 
   349  0116                     	;# 
   350  0117                     	;# 
   351  0118                     	;# 
   352  0119                     	;# 
   353  011A                     	;# 
   354  011B                     	;# 
   355  011D                     	;# 
   356  011D                     	;# 
   357  018C                     	;# 
   358  0191                     	;# 
   359  0191                     	;# 
   360  0192                     	;# 
   361  0193                     	;# 
   362  0193                     	;# 
   363  0193                     	;# 
   364  0194                     	;# 
   365  0195                     	;# 
   366  0196                     	;# 
   367  0199                     	;# 
   368  019A                     	;# 
   369  019B                     	;# 
   370  019B                     	;# 
   371  019B                     	;# 
   372  019B                     	;# 
   373  019C                     	;# 
   374  019C                     	;# 
   375  019D                     	;# 
   376  019E                     	;# 
   377  019F                     	;# 
   378  020C                     	;# 
   379  0211                     	;# 
   380  0211                     	;# 
   381  0212                     	;# 
   382  0212                     	;# 
   383  0213                     	;# 
   384  0213                     	;# 
   385  0214                     	;# 
   386  0214                     	;# 
   387  0215                     	;# 
   388  0215                     	;# 
   389  0215                     	;# 
   390  0216                     	;# 
   391  0216                     	;# 
   392  0217                     	;# 
   393  0217                     	;# 
   394  0291                     	;# 
   395  0291                     	;# 
   396  0292                     	;# 
   397  0293                     	;# 
   398  0294                     	;# 
   399  0295                     	;# 
   400  0295                     	;# 
   401  0296                     	;# 
   402  0391                     	;# 
   403  0392                     	;# 
   404  0393                     	;# 
   405  039A                     	;# 
   406  039C                     	;# 
   407  039D                     	;# 
   408  039E                     	;# 
   409  039F                     	;# 
   410  0FE4                     	;# 
   411  0FE5                     	;# 
   412  0FE6                     	;# 
   413  0FE7                     	;# 
   414  0FE8                     	;# 
   415  0FE9                     	;# 
   416  0FEA                     	;# 
   417  0FEB                     	;# 
   418  0FED                     	;# 
   419  0FEE                     	;# 
   420  0FEF                     	;# 
   421  0000                     	;# 
   422  0001                     	;# 
   423  0002                     	;# 
   424  0003                     	;# 
   425  0004                     	;# 
   426  0005                     	;# 
   427  0006                     	;# 
   428  0007                     	;# 
   429  0008                     	;# 
   430  0009                     	;# 
   431  000A                     	;# 
   432  000B                     	;# 
   433  000C                     	;# 
   434  0011                     	;# 
   435  0012                     	;# 
   436  0015                     	;# 
   437  0016                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001C                     	;# 
   445  001E                     	;# 
   446  001F                     	;# 
   447  008C                     	;# 
   448  0091                     	;# 
   449  0092                     	;# 
   450  0095                     	;# 
   451  0096                     	;# 
   452  0097                     	;# 
   453  0098                     	;# 
   454  0099                     	;# 
   455  009A                     	;# 
   456  009B                     	;# 
   457  009B                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  010C                     	;# 
   462  0111                     	;# 
   463  0112                     	;# 
   464  0115                     	;# 
   465  0116                     	;# 
   466  0117                     	;# 
   467  0118                     	;# 
   468  0119                     	;# 
   469  011A                     	;# 
   470  011B                     	;# 
   471  011D                     	;# 
   472  011D                     	;# 
   473  018C                     	;# 
   474  0191                     	;# 
   475  0191                     	;# 
   476  0192                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0193                     	;# 
   480  0194                     	;# 
   481  0195                     	;# 
   482  0196                     	;# 
   483  0199                     	;# 
   484  019A                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019C                     	;# 
   490  019C                     	;# 
   491  019D                     	;# 
   492  019E                     	;# 
   493  019F                     	;# 
   494  020C                     	;# 
   495  0211                     	;# 
   496  0211                     	;# 
   497  0212                     	;# 
   498  0212                     	;# 
   499  0213                     	;# 
   500  0213                     	;# 
   501  0214                     	;# 
   502  0214                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0216                     	;# 
   507  0216                     	;# 
   508  0217                     	;# 
   509  0217                     	;# 
   510  0291                     	;# 
   511  0291                     	;# 
   512  0292                     	;# 
   513  0293                     	;# 
   514  0294                     	;# 
   515  0295                     	;# 
   516  0295                     	;# 
   517  0296                     	;# 
   518  0391                     	;# 
   519  0392                     	;# 
   520  0393                     	;# 
   521  039A                     	;# 
   522  039C                     	;# 
   523  039D                     	;# 
   524  039E                     	;# 
   525  039F                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0000                     	;# 
   538  0001                     	;# 
   539  0002                     	;# 
   540  0003                     	;# 
   541  0004                     	;# 
   542  0005                     	;# 
   543  0006                     	;# 
   544  0007                     	;# 
   545  0008                     	;# 
   546  0009                     	;# 
   547  000A                     	;# 
   548  000B                     	;# 
   549  000C                     	;# 
   550  0011                     	;# 
   551  0012                     	;# 
   552  0015                     	;# 
   553  0016                     	;# 
   554  0016                     	;# 
   555  0017                     	;# 
   556  0018                     	;# 
   557  0019                     	;# 
   558  001A                     	;# 
   559  001B                     	;# 
   560  001C                     	;# 
   561  001E                     	;# 
   562  001F                     	;# 
   563  008C                     	;# 
   564  0091                     	;# 
   565  0092                     	;# 
   566  0095                     	;# 
   567  0096                     	;# 
   568  0097                     	;# 
   569  0098                     	;# 
   570  0099                     	;# 
   571  009A                     	;# 
   572  009B                     	;# 
   573  009B                     	;# 
   574  009C                     	;# 
   575  009D                     	;# 
   576  009E                     	;# 
   577  010C                     	;# 
   578  0111                     	;# 
   579  0112                     	;# 
   580  0115                     	;# 
   581  0116                     	;# 
   582  0117                     	;# 
   583  0118                     	;# 
   584  0119                     	;# 
   585  011A                     	;# 
   586  011B                     	;# 
   587  011D                     	;# 
   588  011D                     	;# 
   589  018C                     	;# 
   590  0191                     	;# 
   591  0191                     	;# 
   592  0192                     	;# 
   593  0193                     	;# 
   594  0193                     	;# 
   595  0193                     	;# 
   596  0194                     	;# 
   597  0195                     	;# 
   598  0196                     	;# 
   599  0199                     	;# 
   600  019A                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019B                     	;# 
   605  019C                     	;# 
   606  019C                     	;# 
   607  019D                     	;# 
   608  019E                     	;# 
   609  019F                     	;# 
   610  020C                     	;# 
   611  0211                     	;# 
   612  0211                     	;# 
   613  0212                     	;# 
   614  0212                     	;# 
   615  0213                     	;# 
   616  0213                     	;# 
   617  0214                     	;# 
   618  0214                     	;# 
   619  0215                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0216                     	;# 
   623  0216                     	;# 
   624  0217                     	;# 
   625  0217                     	;# 
   626  0291                     	;# 
   627  0291                     	;# 
   628  0292                     	;# 
   629  0293                     	;# 
   630  0294                     	;# 
   631  0295                     	;# 
   632  0295                     	;# 
   633  0296                     	;# 
   634  0391                     	;# 
   635  0392                     	;# 
   636  0393                     	;# 
   637  039A                     	;# 
   638  039C                     	;# 
   639  039D                     	;# 
   640  039E                     	;# 
   641  039F                     	;# 
   642  0FE4                     	;# 
   643  0FE5                     	;# 
   644  0FE6                     	;# 
   645  0FE7                     	;# 
   646  0FE8                     	;# 
   647  0FE9                     	;# 
   648  0FEA                     	;# 
   649  0FEB                     	;# 
   650  0FED                     	;# 
   651  0FEE                     	;# 
   652  0FEF                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0008                     	;# 
   662  0009                     	;# 
   663  000A                     	;# 
   664  000B                     	;# 
   665  000C                     	;# 
   666  0011                     	;# 
   667  0012                     	;# 
   668  0015                     	;# 
   669  0016                     	;# 
   670  0016                     	;# 
   671  0017                     	;# 
   672  0018                     	;# 
   673  0019                     	;# 
   674  001A                     	;# 
   675  001B                     	;# 
   676  001C                     	;# 
   677  001E                     	;# 
   678  001F                     	;# 
   679  008C                     	;# 
   680  0091                     	;# 
   681  0092                     	;# 
   682  0095                     	;# 
   683  0096                     	;# 
   684  0097                     	;# 
   685  0098                     	;# 
   686  0099                     	;# 
   687  009A                     	;# 
   688  009B                     	;# 
   689  009B                     	;# 
   690  009C                     	;# 
   691  009D                     	;# 
   692  009E                     	;# 
   693  010C                     	;# 
   694  0111                     	;# 
   695  0112                     	;# 
   696  0115                     	;# 
   697  0116                     	;# 
   698  0117                     	;# 
   699  0118                     	;# 
   700  0119                     	;# 
   701  011A                     	;# 
   702  011B                     	;# 
   703  011D                     	;# 
   704  011D                     	;# 
   705  018C                     	;# 
   706  0191                     	;# 
   707  0191                     	;# 
   708  0192                     	;# 
   709  0193                     	;# 
   710  0193                     	;# 
   711  0193                     	;# 
   712  0194                     	;# 
   713  0195                     	;# 
   714  0196                     	;# 
   715  0199                     	;# 
   716  019A                     	;# 
   717  019B                     	;# 
   718  019B                     	;# 
   719  019B                     	;# 
   720  019B                     	;# 
   721  019C                     	;# 
   722  019C                     	;# 
   723  019D                     	;# 
   724  019E                     	;# 
   725  019F                     	;# 
   726  020C                     	;# 
   727  0211                     	;# 
   728  0211                     	;# 
   729  0212                     	;# 
   730  0212                     	;# 
   731  0213                     	;# 
   732  0213                     	;# 
   733  0214                     	;# 
   734  0214                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0216                     	;# 
   739  0216                     	;# 
   740  0217                     	;# 
   741  0217                     	;# 
   742  0291                     	;# 
   743  0291                     	;# 
   744  0292                     	;# 
   745  0293                     	;# 
   746  0294                     	;# 
   747  0295                     	;# 
   748  0295                     	;# 
   749  0296                     	;# 
   750  0391                     	;# 
   751  0392                     	;# 
   752  0393                     	;# 
   753  039A                     	;# 
   754  039C                     	;# 
   755  039D                     	;# 
   756  039E                     	;# 
   757  039F                     	;# 
   758  0FE4                     	;# 
   759  0FE5                     	;# 
   760  0FE6                     	;# 
   761  0FE7                     	;# 
   762  0FE8                     	;# 
   763  0FE9                     	;# 
   764  0FEA                     	;# 
   765  0FEB                     	;# 
   766  0FED                     	;# 
   767  0FEE                     	;# 
   768  0FEF                     	;# 
   769  0000                     	;# 
   770  0001                     	;# 
   771  0002                     	;# 
   772  0003                     	;# 
   773  0004                     	;# 
   774  0005                     	;# 
   775  0006                     	;# 
   776  0007                     	;# 
   777  0008                     	;# 
   778  0009                     	;# 
   779  000A                     	;# 
   780  000B                     	;# 
   781  000C                     	;# 
   782  0011                     	;# 
   783  0012                     	;# 
   784  0015                     	;# 
   785  0016                     	;# 
   786  0016                     	;# 
   787  0017                     	;# 
   788  0018                     	;# 
   789  0019                     	;# 
   790  001A                     	;# 
   791  001B                     	;# 
   792  001C                     	;# 
   793  001E                     	;# 
   794  001F                     	;# 
   795  008C                     	;# 
   796  0091                     	;# 
   797  0092                     	;# 
   798  0095                     	;# 
   799  0096                     	;# 
   800  0097                     	;# 
   801  0098                     	;# 
   802  0099                     	;# 
   803  009A                     	;# 
   804  009B                     	;# 
   805  009B                     	;# 
   806  009C                     	;# 
   807  009D                     	;# 
   808  009E                     	;# 
   809  010C                     	;# 
   810  0111                     	;# 
   811  0112                     	;# 
   812  0115                     	;# 
   813  0116                     	;# 
   814  0117                     	;# 
   815  0118                     	;# 
   816  0119                     	;# 
   817  011A                     	;# 
   818  011B                     	;# 
   819  011D                     	;# 
   820  011D                     	;# 
   821  018C                     	;# 
   822  0191                     	;# 
   823  0191                     	;# 
   824  0192                     	;# 
   825  0193                     	;# 
   826  0193                     	;# 
   827  0193                     	;# 
   828  0194                     	;# 
   829  0195                     	;# 
   830  0196                     	;# 
   831  0199                     	;# 
   832  019A                     	;# 
   833  019B                     	;# 
   834  019B                     	;# 
   835  019B                     	;# 
   836  019B                     	;# 
   837  019C                     	;# 
   838  019C                     	;# 
   839  019D                     	;# 
   840  019E                     	;# 
   841  019F                     	;# 
   842  020C                     	;# 
   843  0211                     	;# 
   844  0211                     	;# 
   845  0212                     	;# 
   846  0212                     	;# 
   847  0213                     	;# 
   848  0213                     	;# 
   849  0214                     	;# 
   850  0214                     	;# 
   851  0215                     	;# 
   852  0215                     	;# 
   853  0215                     	;# 
   854  0216                     	;# 
   855  0216                     	;# 
   856  0217                     	;# 
   857  0217                     	;# 
   858  0291                     	;# 
   859  0291                     	;# 
   860  0292                     	;# 
   861  0293                     	;# 
   862  0294                     	;# 
   863  0295                     	;# 
   864  0295                     	;# 
   865  0296                     	;# 
   866  0391                     	;# 
   867  0392                     	;# 
   868  0393                     	;# 
   869  039A                     	;# 
   870  039C                     	;# 
   871  039D                     	;# 
   872  039E                     	;# 
   873  039F                     	;# 
   874  0FE4                     	;# 
   875  0FE5                     	;# 
   876  0FE6                     	;# 
   877  0FE7                     	;# 
   878  0FE8                     	;# 
   879  0FE9                     	;# 
   880  0FEA                     	;# 
   881  0FEB                     	;# 
   882  0FED                     	;# 
   883  0FEE                     	;# 
   884  0FEF                     	;# 
   885  0000                     	;# 
   886  0001                     	;# 
   887  0002                     	;# 
   888  0003                     	;# 
   889  0004                     	;# 
   890  0005                     	;# 
   891  0006                     	;# 
   892  0007                     	;# 
   893  0008                     	;# 
   894  0009                     	;# 
   895  000A                     	;# 
   896  000B                     	;# 
   897  000C                     	;# 
   898  0011                     	;# 
   899  0012                     	;# 
   900  0015                     	;# 
   901  0016                     	;# 
   902  0016                     	;# 
   903  0017                     	;# 
   904  0018                     	;# 
   905  0019                     	;# 
   906  001A                     	;# 
   907  001B                     	;# 
   908  001C                     	;# 
   909  001E                     	;# 
   910  001F                     	;# 
   911  008C                     	;# 
   912  0091                     	;# 
   913  0092                     	;# 
   914  0095                     	;# 
   915  0096                     	;# 
   916  0097                     	;# 
   917  0098                     	;# 
   918  0099                     	;# 
   919  009A                     	;# 
   920  009B                     	;# 
   921  009B                     	;# 
   922  009C                     	;# 
   923  009D                     	;# 
   924  009E                     	;# 
   925  010C                     	;# 
   926  0111                     	;# 
   927  0112                     	;# 
   928  0115                     	;# 
   929  0116                     	;# 
   930  0117                     	;# 
   931  0118                     	;# 
   932  0119                     	;# 
   933  011A                     	;# 
   934  011B                     	;# 
   935  011D                     	;# 
   936  011D                     	;# 
   937  018C                     	;# 
   938  0191                     	;# 
   939  0191                     	;# 
   940  0192                     	;# 
   941  0193                     	;# 
   942  0193                     	;# 
   943  0193                     	;# 
   944  0194                     	;# 
   945  0195                     	;# 
   946  0196                     	;# 
   947  0199                     	;# 
   948  019A                     	;# 
   949  019B                     	;# 
   950  019B                     	;# 
   951  019B                     	;# 
   952  019B                     	;# 
   953  019C                     	;# 
   954  019C                     	;# 
   955  019D                     	;# 
   956  019E                     	;# 
   957  019F                     	;# 
   958  020C                     	;# 
   959  0211                     	;# 
   960  0211                     	;# 
   961  0212                     	;# 
   962  0212                     	;# 
   963  0213                     	;# 
   964  0213                     	;# 
   965  0214                     	;# 
   966  0214                     	;# 
   967  0215                     	;# 
   968  0215                     	;# 
   969  0215                     	;# 
   970  0216                     	;# 
   971  0216                     	;# 
   972  0217                     	;# 
   973  0217                     	;# 
   974  0291                     	;# 
   975  0291                     	;# 
   976  0292                     	;# 
   977  0293                     	;# 
   978  0294                     	;# 
   979  0295                     	;# 
   980  0295                     	;# 
   981  0296                     	;# 
   982  0391                     	;# 
   983  0392                     	;# 
   984  0393                     	;# 
   985  039A                     	;# 
   986  039C                     	;# 
   987  039D                     	;# 
   988  039E                     	;# 
   989  039F                     	;# 
   990  0FE4                     	;# 
   991  0FE5                     	;# 
   992  0FE6                     	;# 
   993  0FE7                     	;# 
   994  0FE8                     	;# 
   995  0FE9                     	;# 
   996  0FEA                     	;# 
   997  0FEB                     	;# 
   998  0FED                     	;# 
   999  0FEE                     	;# 
  1000  0FEF                     	;# 
  1001                           
  1002                           	psect	stringtext1
  1003  007C                     __pstringtext1:	
  1004  007C                     _octpowers:	
  1005  007C  3401               	retlw	1
  1006  007D  3400               	retlw	0
  1007  007E  3408               	retlw	8
  1008  007F  3400               	retlw	0
  1009  0080  3440               	retlw	64
  1010  0081  3400               	retlw	0
  1011  0082  3400               	retlw	0
  1012  0083  3402               	retlw	2
  1013  0084  3400               	retlw	0
  1014  0085  3410               	retlw	16
  1015  0086  3400               	retlw	0
  1016  0087  3480               	retlw	128
  1017  0088                     __end_of_octpowers:	
  1018                           
  1019                           	psect	stringtext2
  1020  005B                     __pstringtext2:	
  1021  005B                     _dpowers:	
  1022  005B  3401               	retlw	1
  1023  005C  3400               	retlw	0
  1024  005D  340A               	retlw	10
  1025  005E  3400               	retlw	0
  1026  005F  3464               	retlw	100
  1027  0060  3400               	retlw	0
  1028  0061  34E8               	retlw	232
  1029  0062  3403               	retlw	3
  1030  0063  3410               	retlw	16
  1031  0064  3427               	retlw	39
  1032  0065                     __end_of_dpowers:	
  1033                           
  1034                           	psect	stringtext3
  1035  0139                     __pstringtext3:	
  1036  0139                     _hexpowers:	
  1037  0139  3401               	retlw	1
  1038  013A  3400               	retlw	0
  1039  013B  3410               	retlw	16
  1040  013C  3400               	retlw	0
  1041  013D  3400               	retlw	0
  1042  013E  3401               	retlw	1
  1043  013F  3400               	retlw	0
  1044  0140  3410               	retlw	16
  1045  0141                     __end_of_hexpowers:	
  1046  001C                     _T2CONbits	set	28
  1047  0011                     _PIR1bits	set	17
  1048  001A                     _TMR2	set	26
  1049  001B                     _PR2	set	27
  1050  001C                     _T2CON	set	28
  1051  009D                     _ADCON0bits	set	157
  1052  009C                     _ADRESH	set	156
  1053  009B                     _ADRESL	set	155
  1054  009E                     _ADCON1	set	158
  1055  009D                     _ADCON0	set	157
  1056  0098                     _OSCTUNE	set	152
  1057  009A                     _OSCSTAT	set	154
  1058  0099                     _OSCCON	set	153
  1059  0095                     _OPTION_REGbits	set	149
  1060  008C                     _TRISA	set	140
  1061  011D                     _APFCON	set	285
  1062  010C                     _LATA	set	268
  1063  019A                     _TXREG	set	410
  1064  0199                     _RCREG	set	409
  1065  019D                     _RCSTAbits	set	413
  1066  019C                     _SPBRGH	set	412
  1067  019B                     _SPBRGL	set	411
  1068  019E                     _TXSTA	set	414
  1069  019D                     _RCSTA	set	413
  1070  019F                     _BAUDCON	set	415
  1071  018C                     _ANSELA	set	396
  1072  020C                     _WPUA	set	524
  1073  0292                     _CCPR1H	set	658
  1074  0291                     _CCPR1L	set	657
  1075  0296                     _PSTR1CON	set	662
  1076  0294                     _PWM1CON	set	660
  1077  0295                     _ECCP1AS	set	661
  1078  0293                     _CCP1CON	set	659
  1079  0141                     STR_1:	
  1080  0141  3461               	retlw	97	;'a'
  1081  0142  3464               	retlw	100	;'d'
  1082  0143  3463               	retlw	99	;'c'
  1083  0144  3420               	retlw	32	;' '
  1084  0145  3476               	retlw	118	;'v'
  1085  0146  3461               	retlw	97	;'a'
  1086  0147  346C               	retlw	108	;'l'
  1087  0148  3475               	retlw	117	;'u'
  1088  0149  3465               	retlw	101	;'e'
  1089  014A  343A               	retlw	58	;':'
  1090  014B  3420               	retlw	32	;' '
  1091  014C  3425               	retlw	37	;'%'
  1092  014D  3464               	retlw	100	;'d'
  1093  014E  3420               	retlw	32	;' '
  1094  014F  346D               	retlw	109	;'m'
  1095  0150  3476               	retlw	118	;'v'
  1096  0151  340D               	retlw	13
  1097  0152  340A               	retlw	10
  1098  0153  3400               	retlw	0
  1099                           
  1100                           	psect	stringtext4
  1101  00E7                     __pstringtext4:	
  1102  00E7                     STR_2:	
  1103  00E7  3430               	retlw	48	;'0'
  1104  00E8  3431               	retlw	49	;'1'
  1105  00E9  3432               	retlw	50	;'2'
  1106  00EA  3433               	retlw	51	;'3'
  1107  00EB  3434               	retlw	52	;'4'
  1108  00EC  3435               	retlw	53	;'5'
  1109  00ED  3436               	retlw	54	;'6'
  1110  00EE  3437               	retlw	55	;'7'
  1111  00EF  3438               	retlw	56	;'8'
  1112  00F0  3439               	retlw	57	;'9'
  1113  00F1  3441               	retlw	65	;'A'
  1114  00F2  3442               	retlw	66	;'B'
  1115  00F3  3443               	retlw	67	;'C'
  1116  00F4  3444               	retlw	68	;'D'
  1117  00F5  3445               	retlw	69	;'E'
  1118  00F6  3446               	retlw	70	;'F'
  1119  00F7  3400               	retlw	0
  1120                           
  1121                           	psect	stringtext5
  1122  00D6                     __pstringtext5:	
  1123  00D6                     STR_3:	
  1124  00D6  3430               	retlw	48	;'0'
  1125  00D7  3431               	retlw	49	;'1'
  1126  00D8  3432               	retlw	50	;'2'
  1127  00D9  3433               	retlw	51	;'3'
  1128  00DA  3434               	retlw	52	;'4'
  1129  00DB  3435               	retlw	53	;'5'
  1130  00DC  3436               	retlw	54	;'6'
  1131  00DD  3437               	retlw	55	;'7'
  1132  00DE  3438               	retlw	56	;'8'
  1133  00DF  3439               	retlw	57	;'9'
  1134  00E0  3461               	retlw	97	;'a'
  1135  00E1  3462               	retlw	98	;'b'
  1136  00E2  3463               	retlw	99	;'c'
  1137  00E3  3464               	retlw	100	;'d'
  1138  00E4  3465               	retlw	101	;'e'
  1139  00E5  3466               	retlw	102	;'f'
  1140  00E6  3400               	retlw	0
  1141                           
  1142                           	psect	stringtext6
  1143  0000                     __pstringtext6:	
  1144                           
  1145                           ; #config settings
  1146  0000                     
  1147                           	psect	cinit
  1148  07FE                     start_initialization:	
  1149  07FE                     __initialization:	
  1150  07FE                     end_of_initialization:	
  1151                           ;End of C runtime variable initialization code
  1152                           
  1153  07FE                     __end_of__initialization:	
  1154  07FE  0020               	movlb	0
  1155  07FF  29D7               	ljmp	_main	;jump to C main() function
  1156                           
  1157                           	psect	cstackCOMMON
  1158  0070                     __pcstackCOMMON:	
  1159  0070                     ?_isdigit:	
  1160  0070                     ?_TMR2_StartTimer:	
  1161                           ; 1 bit 
  1162                           
  1163  0070                     ??_TMR2_StartTimer:	
  1164                           ; 1 bytes @ 0x0
  1165                           
  1166  0070                     ?_OSCILLATOR_Initialize:	
  1167                           ; 1 bytes @ 0x0
  1168                           
  1169  0070                     ??_OSCILLATOR_Initialize:	
  1170                           ; 1 bytes @ 0x0
  1171                           
  1172  0070                     ?_ADC_Initialize:	
  1173                           ; 1 bytes @ 0x0
  1174                           
  1175  0070                     ??_ADC_Initialize:	
  1176                           ; 1 bytes @ 0x0
  1177                           
  1178  0070                     ?_EUSART_Initialize:	
  1179                           ; 1 bytes @ 0x0
  1180                           
  1181  0070                     ??_EUSART_Initialize:	
  1182                           ; 1 bytes @ 0x0
  1183                           
  1184  0070                     ?_delay_us:	
  1185                           ; 1 bytes @ 0x0
  1186                           
  1187  0070                     ??_isdigit:	
  1188                           ; 1 bytes @ 0x0
  1189                           
  1190  0070                     ?_EPWM1_Initialize:	
  1191                           ; 1 bytes @ 0x0
  1192                           
  1193  0070                     ??_EPWM1_Initialize:	
  1194                           ; 1 bytes @ 0x0
  1195                           
  1196  0070                     ?_TMR2_Initialize:	
  1197                           ; 1 bytes @ 0x0
  1198                           
  1199  0070                     ??_TMR2_Initialize:	
  1200                           ; 1 bytes @ 0x0
  1201                           
  1202  0070                     ?_PIN_MANAGER_Initialize:	
  1203                           ; 1 bytes @ 0x0
  1204                           
  1205  0070                     ??_PIN_MANAGER_Initialize:	
  1206                           ; 1 bytes @ 0x0
  1207                           
  1208  0070                     ?_SYSTEM_Initialize:	
  1209                           ; 1 bytes @ 0x0
  1210                           
  1211  0070                     ??_SYSTEM_Initialize:	
  1212                           ; 1 bytes @ 0x0
  1213                           
  1214  0070                     ?_main:	
  1215                           ; 1 bytes @ 0x0
  1216                           
  1217  0070                     ?_EUSART_Write:	
  1218                           ; 1 bytes @ 0x0
  1219                           
  1220  0070                     ??_EUSART_Write:	
  1221                           ; 1 bytes @ 0x0
  1222                           
  1223  0070                     ?_sendString:	
  1224                           ; 1 bytes @ 0x0
  1225                           
  1226  0070                     ?___bmul:	
  1227                           ; 1 bytes @ 0x0
  1228                           
  1229  0070                     ?_ADC_GetConversion:	
  1230                           ; 1 bytes @ 0x0
  1231                           
  1232  0070                     ?___wmul:	
  1233                           ; 2 bytes @ 0x0
  1234                           
  1235  0070                     ?___lwdiv:	
  1236                           ; 2 bytes @ 0x0
  1237                           
  1238  0070                     ?___ftpack:	
  1239                           ; 2 bytes @ 0x0
  1240                           
  1241  0070                     EUSART_Write@txData:	
  1242                           ; 3 bytes @ 0x0
  1243                           
  1244  0070                     ___bmul@multiplicand:	
  1245                           ; 1 bytes @ 0x0
  1246                           
  1247  0070                     _isdigit$576:	
  1248                           ; 1 bytes @ 0x0
  1249                           
  1250  0070                     delay_us@t:	
  1251                           ; 1 bytes @ 0x0
  1252                           
  1253  0070                     ___wmul@multiplier:	
  1254                           ; 2 bytes @ 0x0
  1255                           
  1256  0070                     ___lwdiv@divisor:	
  1257                           ; 2 bytes @ 0x0
  1258                           
  1259  0070                     ___ftpack@arg:	
  1260                           ; 2 bytes @ 0x0
  1261                           
  1262                           
  1263                           ; 3 bytes @ 0x0
  1264  0070                     	ds	1
  1265  0071                     ??_sendString:	
  1266  0071                     ??___bmul:	
  1267                           ; 1 bytes @ 0x1
  1268                           
  1269  0071                     isdigit@c:	
  1270                           ; 1 bytes @ 0x1
  1271                           
  1272                           
  1273                           ; 1 bytes @ 0x1
  1274  0071                     	ds	1
  1275  0072                     ??_ADC_GetConversion:	
  1276  0072                     ??_delay_us:	
  1277                           ; 1 bytes @ 0x2
  1278                           
  1279  0072                     sendString@str:	
  1280                           ; 1 bytes @ 0x2
  1281                           
  1282  0072                     ___bmul@product:	
  1283                           ; 1 bytes @ 0x2
  1284                           
  1285  0072                     delay_us@i:	
  1286                           ; 1 bytes @ 0x2
  1287                           
  1288  0072                     ___wmul@multiplicand:	
  1289                           ; 2 bytes @ 0x2
  1290                           
  1291  0072                     ___lwdiv@dividend:	
  1292                           ; 2 bytes @ 0x2
  1293                           
  1294                           
  1295                           ; 2 bytes @ 0x2
  1296  0072                     	ds	1
  1297  0073                     ADC_GetConversion@channel:	
  1298  0073                     ___bmul@multiplier:	
  1299                           ; 1 bytes @ 0x3
  1300                           
  1301  0073                     ___ftpack@exp:	
  1302                           ; 1 bytes @ 0x3
  1303                           
  1304                           
  1305                           ; 1 bytes @ 0x3
  1306  0073                     	ds	1
  1307  0074                     ??___wmul:	
  1308  0074                     ??___lwdiv:	
  1309                           ; 1 bytes @ 0x4
  1310                           
  1311  0074                     ___ftpack@sign:	
  1312                           ; 1 bytes @ 0x4
  1313                           
  1314  0074                     delay_us@j:	
  1315                           ; 1 bytes @ 0x4
  1316                           
  1317  0074                     ___wmul@product:	
  1318                           ; 2 bytes @ 0x4
  1319                           
  1320                           
  1321                           ; 2 bytes @ 0x4
  1322  0074                     	ds	1
  1323  0075                     ??___ftpack:	
  1324  0075                     ___lwdiv@quotient:	
  1325                           ; 1 bytes @ 0x5
  1326                           
  1327                           
  1328                           ; 2 bytes @ 0x5
  1329  0075                     	ds	2
  1330  0077                     ___lwdiv@counter:	
  1331                           
  1332                           ; 1 bytes @ 0x7
  1333  0077                     	ds	1
  1334  0078                     ?___lwmod:	
  1335  0078                     ?___lwtoft:	
  1336                           ; 2 bytes @ 0x8
  1337                           
  1338  0078                     ___lwmod@divisor:	
  1339                           ; 3 bytes @ 0x8
  1340                           
  1341  0078                     ___lwtoft@c:	
  1342                           ; 2 bytes @ 0x8
  1343                           
  1344                           
  1345                           ; 2 bytes @ 0x8
  1346  0078                     	ds	2
  1347  007A                     ___lwmod@dividend:	
  1348                           
  1349                           ; 2 bytes @ 0xA
  1350  007A                     	ds	1
  1351  007B                     ??___lwtoft:	
  1352                           
  1353                           ; 1 bytes @ 0xB
  1354  007B                     	ds	1
  1355  007C                     ??___lwmod:	
  1356                           
  1357                           ; 1 bytes @ 0xC
  1358  007C                     	ds	1
  1359  007D                     ___lwmod@counter:	
  1360                           
  1361                           ; 1 bytes @ 0xD
  1362  007D                     	ds	1
  1363  007E                     ??_addlog:	
  1364  007E                     ??_main:	
  1365                           ; 1 bytes @ 0xE
  1366                           
  1367                           
  1368                           	psect	cstackBANK0
  1369  0020                     __pcstackBANK0:	
  1370                           ; 1 bytes @ 0xE
  1371                           
  1372  0020                     ?_sprintf:	
  1373  0020                     ?___ftmul:	
  1374                           ; 2 bytes @ 0x0
  1375                           
  1376  0020                     sprintf@f:	
  1377                           ; 3 bytes @ 0x0
  1378                           
  1379  0020                     ___ftmul@f1:	
  1380                           ; 2 bytes @ 0x0
  1381                           
  1382                           
  1383                           ; 3 bytes @ 0x0
  1384  0020                     	ds	3
  1385  0023                     ___ftmul@f2:	
  1386                           
  1387                           ; 3 bytes @ 0x3
  1388  0023                     	ds	1
  1389  0024                     ??_sprintf:	
  1390                           
  1391                           ; 1 bytes @ 0x4
  1392  0024                     	ds	2
  1393  0026                     ??___ftmul:	
  1394                           
  1395                           ; 1 bytes @ 0x6
  1396  0026                     	ds	2
  1397  0028                     _sprintf$383:	
  1398                           
  1399                           ; 2 bytes @ 0x8
  1400  0028                     	ds	2
  1401  002A                     ___ftmul@exp:	
  1402  002A                     _sprintf$384:	
  1403                           ; 1 bytes @ 0xA
  1404                           
  1405                           
  1406                           ; 2 bytes @ 0xA
  1407  002A                     	ds	1
  1408  002B                     ___ftmul@f3_as_product:	
  1409                           
  1410                           ; 3 bytes @ 0xB
  1411  002B                     	ds	1
  1412  002C                     _sprintf$390:	
  1413                           
  1414                           ; 2 bytes @ 0xC
  1415  002C                     	ds	2
  1416  002E                     sprintf@idx:	
  1417  002E                     ___ftmul@cntr:	
  1418                           ; 1 bytes @ 0xE
  1419                           
  1420                           
  1421                           ; 1 bytes @ 0xE
  1422  002E                     	ds	1
  1423  002F                     sprintf@cp:	
  1424  002F                     ___ftmul@sign:	
  1425                           ; 1 bytes @ 0xF
  1426                           
  1427                           
  1428                           ; 1 bytes @ 0xF
  1429  002F                     	ds	1
  1430  0030                     ?___fttol:	
  1431  0030                     sprintf@len:	
  1432                           ; 4 bytes @ 0x10
  1433                           
  1434  0030                     ___fttol@f1:	
  1435                           ; 2 bytes @ 0x10
  1436                           
  1437                           
  1438                           ; 3 bytes @ 0x10
  1439  0030                     	ds	2
  1440  0032                     sprintf@ap:	
  1441                           
  1442                           ; 1 bytes @ 0x12
  1443  0032                     	ds	1
  1444  0033                     sprintf@val:	
  1445                           
  1446                           ; 2 bytes @ 0x13
  1447  0033                     	ds	1
  1448  0034                     ??___fttol:	
  1449                           
  1450                           ; 1 bytes @ 0x14
  1451  0034                     	ds	1
  1452  0035                     sprintf@prec:	
  1453                           
  1454                           ; 1 bytes @ 0x15
  1455  0035                     	ds	1
  1456  0036                     sprintf@width:	
  1457                           
  1458                           ; 2 bytes @ 0x16
  1459  0036                     	ds	2
  1460  0038                     sprintf@c:	
  1461  0038                     ___fttol@sign1:	
  1462                           ; 1 bytes @ 0x18
  1463                           
  1464                           
  1465                           ; 1 bytes @ 0x18
  1466  0038                     	ds	1
  1467  0039                     sprintf@sp:	
  1468  0039                     ___fttol@lval:	
  1469                           ; 1 bytes @ 0x19
  1470                           
  1471                           
  1472                           ; 4 bytes @ 0x19
  1473  0039                     	ds	1
  1474  003A                     sprintf@flag:	
  1475                           
  1476                           ; 2 bytes @ 0x1A
  1477  003A                     	ds	3
  1478  003D                     ___fttol@exp1:	
  1479                           
  1480                           ; 1 bytes @ 0x1D
  1481  003D                     	ds	1
  1482  003E                     ?_addlog:	
  1483  003E                     addlog@tmp:	
  1484                           ; 1 bytes @ 0x1E
  1485                           
  1486                           
  1487                           ; 2 bytes @ 0x1E
  1488  003E                     	ds	2
  1489  0040                     addlog@data:	
  1490                           
  1491                           ; 2 bytes @ 0x20
  1492  0040                     	ds	2
  1493  0042                     addlog@buf:	
  1494                           
  1495                           ; 40 bytes @ 0x22
  1496  0042                     	ds	40
  1497  006A                     main@adcval:	
  1498                           
  1499                           ; 2 bytes @ 0x4A
  1500  006A                     	ds	2
  1501                           
  1502                           	psect	maintext
  1503  01D7                     __pmaintext:	
  1504 ;;
  1505 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1506 ;;
  1507 ;; *************** function _main *****************
  1508 ;; Defined at:
  1509 ;;		line 54 in file "main.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  adcval          2   74[BANK0 ] unsigned int 
  1514 ;;  i               2    0        unsigned int 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : B1F/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMMON   BANK0   BANK1
  1524 ;;      Params:         0       0       0
  1525 ;;      Locals:         0       2       0
  1526 ;;      Temps:          0       0       0
  1527 ;;      Totals:         0       2       0
  1528 ;;Total ram usage:        2 bytes
  1529 ;; Hardware stack levels required when called:    3
  1530 ;; This function calls:
  1531 ;;		_ADC_GetConversion
  1532 ;;		_SYSTEM_Initialize
  1533 ;;		___ftmul
  1534 ;;		___fttol
  1535 ;;		___lwtoft
  1536 ;;		_addlog
  1537 ;;		_delay_us
  1538 ;; This function is called by:
  1539 ;;		Startup code after reset
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           
  1544                           ;psect for function _main
  1545  01D7                     _main:	
  1546                           
  1547                           ;main.c: 56: adc_result_t adcval=0;
  1548                           
  1549                           ;incstack = 0
  1550                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1551  01D7  0020               	movlb	0	; select bank0
  1552  01D8  01EA               	clrf	main@adcval
  1553  01D9  01EB               	clrf	main@adcval+1
  1554                           
  1555                           ;main.c: 57: uint16_t i;
  1556                           ;main.c: 60: SYSTEM_Initialize();
  1557  01DA  203C               	fcall	_SYSTEM_Initialize
  1558  01DB                     l2130:	
  1559                           ;main.c: 77: while (1)
  1560                           
  1561                           
  1562                           ;main.c: 78: {
  1563                           ;main.c: 79: adcval = ADC_GetConversion(channel_AN2);
  1564  01DB  3002               	movlw	2
  1565  01DC  210A               	fcall	_ADC_GetConversion
  1566  01DD  0871               	movf	?_ADC_GetConversion+1,w
  1567  01DE  0020               	movlb	0	; select bank0
  1568  01DF  00EB               	movwf	main@adcval+1
  1569  01E0  0870               	movf	?_ADC_GetConversion,w
  1570  01E1  00EA               	movwf	main@adcval
  1571                           
  1572                           ;main.c: 80: addlog("adc value: %d mv\r\n", (uint16_t)(adcval*3.2) );
  1573  01E2  3041               	movlw	low (STR_1| (0+32768))
  1574  01E3  00BE               	movwf	addlog@tmp
  1575  01E4  3081               	movlw	high (STR_1| (0+32768))
  1576  01E5  00BF               	movwf	addlog@tmp+1
  1577  01E6  086B               	movf	main@adcval+1,w
  1578  01E7  00F9               	movwf	___lwtoft@c+1
  1579  01E8  086A               	movf	main@adcval,w
  1580  01E9  00F8               	movwf	___lwtoft@c
  1581  01EA  20F8               	fcall	___lwtoft
  1582  01EB  0878               	movf	?___lwtoft,w
  1583  01EC  0020               	movlb	0	; select bank0
  1584  01ED  00A3               	movwf	___ftmul@f2
  1585  01EE  0879               	movf	?___lwtoft+1,w
  1586  01EF  00A4               	movwf	___ftmul@f2+1
  1587  01F0  087A               	movf	?___lwtoft+2,w
  1588  01F1  00A5               	movwf	___ftmul@f2+2
  1589  01F2  30CD               	movlw	205
  1590  01F3  00A0               	movwf	___ftmul@f1
  1591  01F4  304C               	movlw	76
  1592  01F5  00A1               	movwf	___ftmul@f1+1
  1593  01F6  3040               	movlw	64
  1594  01F7  00A2               	movwf	___ftmul@f1+2
  1595  01F8  22F8               	fcall	___ftmul
  1596  01F9  0020               	movlb	0	; select bank0
  1597  01FA  0820               	movf	?___ftmul,w
  1598  01FB  00B0               	movwf	___fttol@f1
  1599  01FC  0821               	movf	?___ftmul+1,w
  1600  01FD  00B1               	movwf	___fttol@f1+1
  1601  01FE  0822               	movf	?___ftmul+2,w
  1602  01FF  00B2               	movwf	___fttol@f1+2
  1603  0200  2271               	fcall	___fttol
  1604  0201  0020               	movlb	0	; select bank0
  1605  0202  0831               	movf	?___fttol+1,w
  1606  0203  00C1               	movwf	addlog@data+1
  1607  0204  0830               	movf	?___fttol,w
  1608  0205  00C0               	movwf	addlog@data
  1609  0206  2096               	fcall	_addlog
  1610                           
  1611                           ;main.c: 81: delay_us(6000);
  1612  0207  3070               	movlw	112
  1613  0208  00F0               	movwf	delay_us@t
  1614  0209  3017               	movlw	23
  1615  020A  00F1               	movwf	delay_us@t+1
  1616  020B  2154               	fcall	_delay_us
  1617  020C  29DB               	goto	l2130
  1618  020D                     __end_of_main:	
  1619                           
  1620                           	psect	text1
  1621  0154                     __ptext1:	
  1622 ;; *************** function _delay_us *****************
  1623 ;; Defined at:
  1624 ;;		line 9 in file "delay.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;  t               2    0[COMMON] unsigned int 
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  j               2    4[COMMON] unsigned int 
  1629 ;;  i               2    2[COMMON] unsigned int 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, status,2
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1
  1639 ;;      Params:         2       0       0
  1640 ;;      Locals:         4       0       0
  1641 ;;      Temps:          0       0       0
  1642 ;;      Totals:         6       0       0
  1643 ;;Total ram usage:        6 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; This function calls:
  1646 ;;		Nothing
  1647 ;; This function is called by:
  1648 ;;		_main
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           
  1653                           ;psect for function _delay_us
  1654  0154                     _delay_us:	
  1655                           
  1656                           ;delay.c: 11: uint16_t i;
  1657                           ;delay.c: 12: uint16_t j;
  1658                           ;delay.c: 14: for(i=0; i<t; i++)
  1659                           
  1660                           ;incstack = 0
  1661                           ; Regs used in _delay_us: [wreg+status,2]
  1662  0154  01F2               	clrf	delay_us@i
  1663  0155  01F3               	clrf	delay_us@i+1
  1664  0156                     l172:	
  1665  0156  0871               	movf	delay_us@t+1,w
  1666  0157  0273               	subwf	delay_us@i+1,w
  1667  0158  1D03               	skipz
  1668  0159  295C               	goto	u2265
  1669  015A  0870               	movf	delay_us@t,w
  1670  015B  0272               	subwf	delay_us@i,w
  1671  015C                     u2265:	
  1672  015C  1803               	btfsc	3,0
  1673  015D  0008               	return
  1674                           
  1675                           ;delay.c: 15: for(j=0; j<8; j++);
  1676  015E  01F4               	clrf	delay_us@j
  1677  015F  01F5               	clrf	delay_us@j+1
  1678  0160  3000               	movlw	0
  1679  0161  0275               	subwf	delay_us@j+1,w
  1680  0162  3008               	movlw	8
  1681  0163  1903               	skipnz
  1682  0164  0274               	subwf	delay_us@j,w
  1683  0165  1803               	btfsc	3,0
  1684  0166  2972               	goto	l2028
  1685  0167                     l2026:	
  1686  0167  3001               	movlw	1
  1687  0168  07F4               	addwf	delay_us@j,f
  1688  0169  3000               	movlw	0
  1689  016A  3DF5               	addwfc	delay_us@j+1,f
  1690  016B  3000               	movlw	0
  1691  016C  0275               	subwf	delay_us@j+1,w
  1692  016D  3008               	movlw	8
  1693  016E  1903               	skipnz
  1694  016F  0274               	subwf	delay_us@j,w
  1695  0170  1C03               	skipc
  1696  0171  2967               	goto	l2026
  1697  0172                     l2028:	
  1698  0172  3001               	movlw	1
  1699  0173  07F2               	addwf	delay_us@i,f
  1700  0174  3000               	movlw	0
  1701  0175  3DF3               	addwfc	delay_us@i+1,f
  1702  0176  2956               	goto	l172
  1703  0177                     __end_of_delay_us:	
  1704                           
  1705                           	psect	text2
  1706  0096                     __ptext2:	
  1707 ;; *************** function _addlog *****************
  1708 ;; Defined at:
  1709 ;;		line 19 in file "uart.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  tmp             2   30[BANK0 ] PTR const unsigned char 
  1712 ;;		 -> STR_1(19), 
  1713 ;;  data            2   32[BANK0 ] const unsigned int 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  buf            40   34[BANK0 ] unsigned char [40]
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMMON   BANK0   BANK1
  1725 ;;      Params:         0       4       0
  1726 ;;      Locals:         0      40       0
  1727 ;;      Temps:          0       0       0
  1728 ;;      Totals:         0      44       0
  1729 ;;Total ram usage:       44 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    2
  1732 ;; This function calls:
  1733 ;;		_sendString
  1734 ;;		_sprintf
  1735 ;; This function is called by:
  1736 ;;		_main
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           
  1741                           ;psect for function _addlog
  1742  0096                     _addlog:	
  1743                           
  1744                           ;uart.c: 21: char buf[40];
  1745                           ;uart.c: 23: sprintf(buf, tmp, data);
  1746                           
  1747                           ;incstack = 0
  1748                           ; Regs used in _addlog: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1749  0096  0020               	movlb	0	; select bank0
  1750  0097  083F               	movf	addlog@tmp+1,w
  1751  0098  00A1               	movwf	sprintf@f+1
  1752  0099  083E               	movf	addlog@tmp,w
  1753  009A  00A0               	movwf	sprintf@f
  1754  009B  0841               	movf	addlog@data+1,w
  1755  009C  00A3               	movwf	?_sprintf+3
  1756  009D  0840               	movf	addlog@data,w
  1757  009E  00A2               	movwf	?_sprintf+2
  1758  009F  3042               	movlw	(low (addlog@buf| 0))& (0+255)
  1759  00A0  23AB               	fcall	_sprintf
  1760                           
  1761                           ;uart.c: 24: sendString(buf);
  1762  00A1  3042               	movlw	(low (addlog@buf| 0))& (0+255)
  1763  00A2  20B4               	fcall	_sendString
  1764  00A3  0008               	return
  1765  00A4                     __end_of_addlog:	
  1766                           
  1767                           	psect	text3
  1768  03AB                     __ptext3:	
  1769 ;; *************** function _sprintf *****************
  1770 ;; Defined at:
  1771 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;  sp              1    wreg     PTR unsigned char 
  1774 ;;		 -> addlog@buf(40), 
  1775 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1776 ;;		 -> STR_1(19), 
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;  sp              1   25[BANK0 ] PTR unsigned char 
  1779 ;;		 -> addlog@buf(40), 
  1780 ;;  idx             1   14[BANK0 ] unsigned char 
  1781 ;;  tmpval          4    0        struct .
  1782 ;;  flag            2   26[BANK0 ] unsigned short 
  1783 ;;  width           2   22[BANK0 ] int 
  1784 ;;  val             2   19[BANK0 ] unsigned int 
  1785 ;;  len             2   16[BANK0 ] unsigned int 
  1786 ;;  c               1   24[BANK0 ] char 
  1787 ;;  prec            1   21[BANK0 ] char 
  1788 ;;  ap              1   18[BANK0 ] PTR void [1]
  1789 ;;		 -> ?_sprintf(2), 
  1790 ;;  cp              1   15[BANK0 ] PTR const unsigned char 
  1791 ;;		 -> sprintf@c(1), 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  2    0[BANK0 ] int 
  1794 ;; Registers used:
  1795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMMON   BANK0   BANK1
  1801 ;;      Params:         0       4       0
  1802 ;;      Locals:         0      20       0
  1803 ;;      Temps:          0       4       0
  1804 ;;      Totals:         0      28       0
  1805 ;;Total ram usage:       28 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    1
  1808 ;; This function calls:
  1809 ;;		___bmul
  1810 ;;		___lwdiv
  1811 ;;		___lwmod
  1812 ;;		___wmul
  1813 ;;		_isdigit
  1814 ;; This function is called by:
  1815 ;;		_addlog
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           
  1820                           ;psect for function _sprintf
  1821  03AB                     _sprintf:	
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1825                           ;sprintf@sp stored from wreg
  1826  03AB  0020               	movlb	0	; select bank0
  1827  03AC  00B9               	movwf	sprintf@sp
  1828                           
  1829                           ;doprnt.c: 494: va_list ap;
  1830                           ;doprnt.c: 499: signed char c;
  1831                           ;doprnt.c: 501: int width;
  1832                           ;doprnt.c: 506: signed char prec;
  1833                           ;doprnt.c: 508: unsigned short flag;
  1834                           ;doprnt.c: 523: union {
  1835                           ;doprnt.c: 524: unsigned long vd;
  1836                           ;doprnt.c: 525: double integ;
  1837                           ;doprnt.c: 526: } tmpval;
  1838                           ;doprnt.c: 528: unsigned int val;
  1839                           ;doprnt.c: 529: unsigned len;
  1840                           ;doprnt.c: 530: const char * cp;
  1841                           ;doprnt.c: 533: *ap = __va_start();
  1842  03AD  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1843  03AE  00A4               	movwf	??_sprintf
  1844  03AF  0824               	movf	??_sprintf,w
  1845  03B0  00B2               	movwf	sprintf@ap
  1846  03B1                     l1964:	
  1847                           ;doprnt.c: 536: while(c = *f++) {
  1848                           
  1849  03B1  0020               	movlb	0	; select bank0
  1850  03B2  0821               	movf	sprintf@f+1,w
  1851  03B3  00A5               	movwf	??_sprintf+1
  1852  03B4  0820               	movf	sprintf@f,w
  1853  03B5  00A4               	movwf	??_sprintf
  1854  03B6  0AA0               	incf	sprintf@f,f
  1855  03B7  1903               	skipnz
  1856  03B8  0AA1               	incf	sprintf@f+1,f
  1857  03B9  0824               	movf	??_sprintf,w
  1858  03BA  0084               	movwf	4
  1859  03BB  0825               	movf	??_sprintf+1,w
  1860  03BC  0085               	movwf	5
  1861  03BD  0800               	movf	0,w	;code access
  1862  03BE  00A6               	movwf	??_sprintf+2
  1863  03BF  0826               	movf	??_sprintf+2,w
  1864  03C0  00B8               	movwf	sprintf@c
  1865  03C1  0838               	movf	sprintf@c,w
  1866  03C2  1903               	btfsc	3,2
  1867  03C3  2FF9               	goto	l1966
  1868                           
  1869                           ;doprnt.c: 538: if(c != '%')
  1870  03C4  3025               	movlw	37
  1871  03C5  0638               	xorwf	sprintf@c,w
  1872  03C6  1903               	btfsc	3,2
  1873  03C7  2BD4               	goto	l1644
  1874                           
  1875                           ;doprnt.c: 540: {
  1876                           ;doprnt.c: 541: ((*sp++ = (c)));
  1877  03C8  0838               	movf	sprintf@c,w
  1878  03C9  00A4               	movwf	??_sprintf
  1879  03CA  0839               	movf	sprintf@sp,w
  1880  03CB  0086               	movwf	6
  1881  03CC  0187               	clrf	7
  1882  03CD  0824               	movf	??_sprintf,w
  1883  03CE  0081               	movwf	1
  1884  03CF  3001               	movlw	1
  1885  03D0  00A4               	movwf	??_sprintf
  1886  03D1  0824               	movf	??_sprintf,w
  1887  03D2  07B9               	addwf	sprintf@sp,f
  1888                           
  1889                           ;doprnt.c: 542: continue;
  1890  03D3  2BB1               	goto	l1964
  1891  03D4                     l1644:	
  1892                           
  1893                           ;doprnt.c: 543: }
  1894                           ;doprnt.c: 546: width = 0;
  1895  03D4  01B6               	clrf	sprintf@width
  1896  03D5  01B7               	clrf	sprintf@width+1
  1897                           
  1898                           ;doprnt.c: 548: flag = 0;
  1899  03D6  01BA               	clrf	sprintf@flag
  1900  03D7  01BB               	clrf	sprintf@flag+1
  1901                           
  1902                           ;doprnt.c: 551: switch(*f) {
  1903                           
  1904                           ;doprnt.c: 550: for(;;) {
  1905  03D8  2BE4               	goto	l1656
  1906  03D9                     l210:	
  1907                           ;doprnt.c: 553: case '-':
  1908                           
  1909                           
  1910                           ;doprnt.c: 554: flag |= 0x08;
  1911  03D9  15BA               	bsf	sprintf@flag,3
  1912  03DA  2BE0               	goto	l1652
  1913  03DB                     l212:	
  1914                           ;doprnt.c: 560: case ' ':
  1915                           
  1916                           ;doprnt.c: 556: continue;
  1917                           
  1918                           ;doprnt.c: 555: f++;
  1919                           
  1920                           
  1921                           ;doprnt.c: 561: flag |= 0x01;
  1922  03DB  143A               	bsf	sprintf@flag,0
  1923  03DC  2BE0               	goto	l1652
  1924  03DD                     l213:	
  1925                           ;doprnt.c: 573: case '#':
  1926                           
  1927                           ;doprnt.c: 563: continue;
  1928                           
  1929                           ;doprnt.c: 562: f++;
  1930                           
  1931                           
  1932                           ;doprnt.c: 574: flag |= 0x800;
  1933  03DD  15BB               	bsf	sprintf@flag+1,3
  1934  03DE  2BE0               	goto	l1652
  1935  03DF                     l214:	
  1936                           ;doprnt.c: 579: case '0':
  1937                           
  1938                           ;doprnt.c: 576: continue;
  1939                           
  1940                           ;doprnt.c: 575: f++;
  1941                           
  1942                           
  1943                           ;doprnt.c: 580: flag |= 0x04;
  1944  03DF  153A               	bsf	sprintf@flag,2
  1945  03E0                     l1652:	
  1946                           
  1947                           ;doprnt.c: 581: f++;
  1948  03E0  3001               	movlw	1
  1949  03E1  07A0               	addwf	sprintf@f,f
  1950  03E2  3000               	movlw	0
  1951  03E3  3DA1               	addwfc	sprintf@f+1,f
  1952  03E4                     l1656:	
  1953                           ;doprnt.c: 584: }
  1954                           
  1955                           ;doprnt.c: 582: continue;
  1956                           
  1957  03E4  0820               	movf	sprintf@f,w
  1958  03E5  0084               	movwf	4
  1959  03E6  0821               	movf	sprintf@f+1,w
  1960  03E7  0085               	movwf	5
  1961  03E8  0800               	movf	0,w	;code access
  1962                           
  1963                           ; Switch size 1, requested type "space"
  1964                           ; Number of cases is 4, Range of values is 32 to 48
  1965                           ; switch strategies available:
  1966                           ; Name         Instructions Cycles
  1967                           ; simple_byte           13     7 (average)
  1968                           ; direct_byte           43     9 (fixed)
  1969                           ; jumptable            263     9 (fixed)
  1970                           ;	Chosen strategy is simple_byte
  1971  03E9  3A20               	xorlw	32	; case 32
  1972  03EA  1903               	skipnz
  1973  03EB  2BDB               	goto	l212
  1974  03EC  3A03               	xorlw	3	; case 35
  1975  03ED  1903               	skipnz
  1976  03EE  2BDD               	goto	l213
  1977  03EF  3A0E               	xorlw	14	; case 45
  1978  03F0  1903               	skipnz
  1979  03F1  2BD9               	goto	l210
  1980  03F2  3A1D               	xorlw	29	; case 48
  1981  03F3  1903               	skipnz
  1982  03F4  2BDF               	goto	l214
  1983  03F5  2BF6               	goto	l216
  1984  03F6                     l216:	
  1985                           ;doprnt.c: 586: }
  1986                           
  1987                           ;doprnt.c: 585: break;
  1988                           
  1989                           
  1990                           ;doprnt.c: 593: if(flag & 0x08)
  1991  03F6  1DBA               	btfss	sprintf@flag,3
  1992  03F7  2BFC               	goto	l1660
  1993                           
  1994                           ;doprnt.c: 594: flag &= ~0x04;
  1995  03F8  30FB               	movlw	251
  1996  03F9  05BA               	andwf	sprintf@flag,f
  1997  03FA  30FF               	movlw	255
  1998  03FB  05BB               	andwf	sprintf@flag+1,f
  1999  03FC                     l1660:	
  2000                           
  2001                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2002  03FC  0820               	movf	sprintf@f,w
  2003  03FD  0084               	movwf	4
  2004  03FE  0821               	movf	sprintf@f+1,w
  2005  03FF  0085               	movwf	5
  2006  0400  0800               	movf	0,w	;code access
  2007  0401  2088               	fcall	_isdigit
  2008  0402  1C03               	btfss	3,0
  2009  0403  2C32               	goto	l1672
  2010                           
  2011                           ;doprnt.c: 598: width = 0;
  2012  0404  0020               	movlb	0	; select bank0
  2013  0405  01B6               	clrf	sprintf@width
  2014  0406  01B7               	clrf	sprintf@width+1
  2015  0407                     l1664:	
  2016                           ;doprnt.c: 599: do {
  2017                           
  2018                           
  2019                           ;doprnt.c: 600: width *= 10;
  2020  0407  300A               	movlw	10
  2021  0408  00F0               	movwf	___wmul@multiplier
  2022  0409  3000               	movlw	0
  2023  040A  00F1               	movwf	___wmul@multiplier+1
  2024  040B  0020               	movlb	0	; select bank0
  2025  040C  0837               	movf	sprintf@width+1,w
  2026  040D  00F3               	movwf	___wmul@multiplicand+1
  2027  040E  0836               	movf	sprintf@width,w
  2028  040F  00F2               	movwf	___wmul@multiplicand
  2029  0410  211E               	fcall	___wmul
  2030  0411  0871               	movf	?___wmul+1,w
  2031  0412  0020               	movlb	0	; select bank0
  2032  0413  00B7               	movwf	sprintf@width+1
  2033  0414  0870               	movf	?___wmul,w
  2034  0415  00B6               	movwf	sprintf@width
  2035                           
  2036                           ;doprnt.c: 601: width += *f++ - '0';
  2037  0416  0820               	movf	sprintf@f,w
  2038  0417  0084               	movwf	4
  2039  0418  0821               	movf	sprintf@f+1,w
  2040  0419  0085               	movwf	5
  2041  041A  0800               	movf	0,w	;code access
  2042  041B  3ED0               	addlw	208
  2043  041C  00A4               	movwf	??_sprintf
  2044  041D  30FF               	movlw	255
  2045  041E  1803               	skipnc
  2046  041F  3000               	movlw	0
  2047  0420  00A5               	movwf	??_sprintf+1
  2048  0421  0824               	movf	??_sprintf,w
  2049  0422  07B6               	addwf	sprintf@width,f
  2050  0423  0825               	movf	??_sprintf+1,w
  2051  0424  3DB7               	addwfc	sprintf@width+1,f
  2052  0425  3001               	movlw	1
  2053  0426  07A0               	addwf	sprintf@f,f
  2054  0427  3000               	movlw	0
  2055  0428  3DA1               	addwfc	sprintf@f+1,f
  2056                           
  2057                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2058  0429  0820               	movf	sprintf@f,w
  2059  042A  0084               	movwf	4
  2060  042B  0821               	movf	sprintf@f+1,w
  2061  042C  0085               	movwf	5
  2062  042D  0800               	movf	0,w	;code access
  2063  042E  2088               	fcall	_isdigit
  2064  042F  1C03               	btfss	3,0
  2065  0430  2C4A               	goto	l1680
  2066  0431  2C07               	goto	l1664
  2067  0432                     l1672:	
  2068                           ;doprnt.c: 604: } else if(*f == '*') {
  2069                           
  2070  0432  0020               	movlb	0	; select bank0
  2071  0433  0820               	movf	sprintf@f,w
  2072  0434  0084               	movwf	4
  2073  0435  0821               	movf	sprintf@f+1,w
  2074  0436  0085               	movwf	5
  2075  0437  0012               	moviw fsr0++
  2076  0438  3A2A               	xorlw	42
  2077  0439  1D03               	btfss	3,2
  2078  043A  2C4A               	goto	l1680
  2079                           
  2080                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  2081  043B  0832               	movf	sprintf@ap,w
  2082  043C  0086               	movwf	6
  2083  043D  0187               	clrf	7
  2084  043E  3F40               	moviw [0]fsr1
  2085  043F  00B6               	movwf	sprintf@width
  2086  0440  3F41               	moviw [1]fsr1
  2087  0441  00B7               	movwf	sprintf@width+1
  2088  0442  3002               	movlw	2
  2089  0443  00A4               	movwf	??_sprintf
  2090  0444  0824               	movf	??_sprintf,w
  2091  0445  07B2               	addwf	sprintf@ap,f
  2092                           
  2093                           ;doprnt.c: 606: f++;
  2094  0446  3001               	movlw	1
  2095  0447  07A0               	addwf	sprintf@f,f
  2096  0448  3000               	movlw	0
  2097  0449  3DA1               	addwfc	sprintf@f+1,f
  2098  044A                     l1680:	
  2099                           
  2100                           ;doprnt.c: 608: }
  2101                           ;doprnt.c: 611: if(*f == '.') {
  2102  044A  0020               	movlb	0	; select bank0
  2103  044B  0820               	movf	sprintf@f,w
  2104  044C  0084               	movwf	4
  2105  044D  0821               	movf	sprintf@f+1,w
  2106  044E  0085               	movwf	5
  2107  044F  0012               	moviw fsr0++
  2108  0450  3A2E               	xorlw	46
  2109  0451  1D03               	btfss	3,2
  2110  0452  2C91               	goto	l1702
  2111                           
  2112                           ;doprnt.c: 612: flag |= 0x4000;
  2113  0453  173B               	bsf	sprintf@flag+1,6
  2114                           
  2115                           ;doprnt.c: 613: f++;
  2116  0454  3001               	movlw	1
  2117  0455  07A0               	addwf	sprintf@f,f
  2118  0456  3000               	movlw	0
  2119  0457  3DA1               	addwfc	sprintf@f+1,f
  2120                           
  2121                           ;doprnt.c: 615: if(*f == '*') {
  2122  0458  0820               	movf	sprintf@f,w
  2123  0459  0084               	movwf	4
  2124  045A  0821               	movf	sprintf@f+1,w
  2125  045B  0085               	movwf	5
  2126  045C  0012               	moviw fsr0++
  2127  045D  3A2A               	xorlw	42
  2128  045E  1D03               	btfss	3,2
  2129  045F  2C70               	goto	l1694
  2130                           
  2131                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  2132  0460  0832               	movf	sprintf@ap,w
  2133  0461  0086               	movwf	6
  2134  0462  0187               	clrf	7
  2135  0463  0801               	movf	1,w
  2136  0464  00A4               	movwf	??_sprintf
  2137  0465  0824               	movf	??_sprintf,w
  2138  0466  00B5               	movwf	sprintf@prec
  2139  0467  3002               	movlw	2
  2140  0468  00A4               	movwf	??_sprintf
  2141  0469  0824               	movf	??_sprintf,w
  2142  046A  07B2               	addwf	sprintf@ap,f
  2143                           
  2144                           ;doprnt.c: 617: f++;
  2145  046B  3001               	movlw	1
  2146  046C  07A0               	addwf	sprintf@f,f
  2147  046D  3000               	movlw	0
  2148  046E  3DA1               	addwfc	sprintf@f+1,f
  2149                           
  2150                           ;doprnt.c: 618: } else
  2151  046F  2D24               	goto	l1754
  2152  0470                     l1694:	
  2153                           
  2154                           ;doprnt.c: 620: {
  2155                           ;doprnt.c: 621: prec = 0;
  2156  0470  01B5               	clrf	sprintf@prec
  2157  0471                     l1700:	
  2158                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2159                           
  2160  0471  0820               	movf	sprintf@f,w
  2161  0472  0084               	movwf	4
  2162  0473  0821               	movf	sprintf@f+1,w
  2163  0474  0085               	movwf	5
  2164  0475  0800               	movf	0,w	;code access
  2165  0476  2088               	fcall	_isdigit
  2166  0477  1C03               	btfss	3,0
  2167  0478  2D24               	goto	l1754
  2168                           
  2169                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2170  0479  0020               	movlb	0	; select bank0
  2171  047A  0820               	movf	sprintf@f,w
  2172  047B  0084               	movwf	4
  2173  047C  0821               	movf	sprintf@f+1,w
  2174  047D  0085               	movwf	5
  2175  047E  0800               	movf	0,w	;code access
  2176  047F  00A4               	movwf	??_sprintf
  2177  0480  300A               	movlw	10
  2178  0481  00A5               	movwf	??_sprintf+1
  2179  0482  0825               	movf	??_sprintf+1,w
  2180  0483  00F0               	movwf	___bmul@multiplicand
  2181  0484  0835               	movf	sprintf@prec,w
  2182  0485  20C5               	fcall	___bmul
  2183  0486  0020               	movlb	0	; select bank0
  2184  0487  0724               	addwf	??_sprintf,w
  2185  0488  3ED0               	addlw	-48
  2186  0489  00A6               	movwf	??_sprintf+2
  2187  048A  0826               	movf	??_sprintf+2,w
  2188  048B  00B5               	movwf	sprintf@prec
  2189  048C  3001               	movlw	1
  2190  048D  07A0               	addwf	sprintf@f,f
  2191  048E  3000               	movlw	0
  2192  048F  3DA1               	addwfc	sprintf@f+1,f
  2193  0490  2C71               	goto	l1700
  2194  0491                     l1702:	
  2195                           ;doprnt.c: 624: }
  2196                           ;doprnt.c: 625: } else {
  2197                           
  2198                           
  2199                           ;doprnt.c: 626: prec = 0;
  2200  0491  0020               	movlb	0	; select bank0
  2201  0492  01B5               	clrf	sprintf@prec
  2202                           
  2203                           ;doprnt.c: 630: }
  2204                           ;doprnt.c: 635: switch(c = *f++) {
  2205  0493  2D24               	goto	l1754
  2206  0494                     l233:	
  2207                           ;doprnt.c: 689: case 'o':
  2208                           
  2209                           ;doprnt.c: 638: goto alldone;
  2210                           
  2211                           ;doprnt.c: 637: case 0:
  2212                           
  2213                           
  2214                           ;doprnt.c: 691: flag |= 0x40;
  2215  0494  173A               	bsf	sprintf@flag,6
  2216                           
  2217                           ;doprnt.c: 698: case 'i':
  2218                           ;doprnt.c: 699: break;
  2219                           
  2220                           ;doprnt.c: 697: case 'd':
  2221                           
  2222                           ;doprnt.c: 693: break;
  2223  0495  2D4B               	goto	l1756
  2224  0496                     l237:	
  2225                           ;doprnt.c: 712: case 'X':
  2226                           
  2227                           
  2228                           ;doprnt.c: 714: flag |= 0x20;
  2229  0496  16BA               	bsf	sprintf@flag,5
  2230  0497                     l238:	
  2231                           ;doprnt.c: 718: case 'x':
  2232                           
  2233                           
  2234                           ;doprnt.c: 721: flag |= 0x80;
  2235  0497  17BA               	bsf	sprintf@flag,7
  2236                           
  2237                           ;doprnt.c: 723: break;
  2238  0498  2D4B               	goto	l1756
  2239  0499                     l1704:	
  2240                           ;doprnt.c: 750: dostring:
  2241                           
  2242                           
  2243                           ;doprnt.c: 753: if(prec && prec < len)
  2244  0499  0835               	movf	sprintf@prec,w
  2245  049A  1903               	btfsc	3,2
  2246  049B  2CAE               	goto	l1710
  2247  049C  0835               	movf	sprintf@prec,w
  2248  049D  00A4               	movwf	??_sprintf
  2249  049E  01A5               	clrf	??_sprintf+1
  2250  049F  1BA4               	btfsc	??_sprintf,7
  2251  04A0  03A5               	decf	??_sprintf+1,f
  2252  04A1  0831               	movf	sprintf@len+1,w
  2253  04A2  0225               	subwf	??_sprintf+1,w
  2254  04A3  1D03               	skipz
  2255  04A4  2CA7               	goto	u1595
  2256  04A5  0830               	movf	sprintf@len,w
  2257  04A6  0224               	subwf	??_sprintf,w
  2258  04A7                     u1595:	
  2259  04A7  1803               	skipnc
  2260  04A8  2CAE               	goto	l1710
  2261                           
  2262                           ;doprnt.c: 754: len = prec;
  2263  04A9  0835               	movf	sprintf@prec,w
  2264  04AA  00B0               	movwf	sprintf@len
  2265  04AB  01B1               	clrf	sprintf@len+1
  2266  04AC  1BB0               	btfsc	sprintf@len,7
  2267  04AD  03B1               	decf	sprintf@len+1,f
  2268  04AE                     l1710:	
  2269                           
  2270                           ;doprnt.c: 757: if(width > len)
  2271  04AE  0837               	movf	sprintf@width+1,w
  2272  04AF  0231               	subwf	sprintf@len+1,w
  2273  04B0  1D03               	skipz
  2274  04B1  2CB4               	goto	u1605
  2275  04B2  0836               	movf	sprintf@width,w
  2276  04B3  0230               	subwf	sprintf@len,w
  2277  04B4                     u1605:	
  2278  04B4  1803               	skipnc
  2279  04B5  2CBB               	goto	l1714
  2280                           
  2281                           ;doprnt.c: 758: width -= len;
  2282  04B6  0830               	movf	sprintf@len,w
  2283  04B7  02B6               	subwf	sprintf@width,f
  2284  04B8  0831               	movf	sprintf@len+1,w
  2285  04B9  3BB7               	subwfb	sprintf@width+1,f
  2286  04BA  2CBD               	goto	l1716
  2287  04BB                     l1714:	
  2288                           
  2289                           ;doprnt.c: 759: else
  2290                           ;doprnt.c: 760: width = 0;
  2291  04BB  01B6               	clrf	sprintf@width
  2292  04BC  01B7               	clrf	sprintf@width+1
  2293  04BD                     l1716:	
  2294                           
  2295                           ;doprnt.c: 762: if(!(flag & 0x08))
  2296  04BD  1DBA               	btfss	sprintf@flag,3
  2297  04BE  2CCB               	goto	l1724
  2298  04BF  2CE8               	goto	l1732
  2299  04C0                     l1720:	
  2300                           ;doprnt.c: 764: while(width--)
  2301                           
  2302                           
  2303                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2304  04C0  3020               	movlw	32
  2305  04C1  00A4               	movwf	??_sprintf
  2306  04C2  0839               	movf	sprintf@sp,w
  2307  04C3  0086               	movwf	6
  2308  04C4  0187               	clrf	7
  2309  04C5  0824               	movf	??_sprintf,w
  2310  04C6  0081               	movwf	1
  2311  04C7  3001               	movlw	1
  2312  04C8  00A4               	movwf	??_sprintf
  2313  04C9  0824               	movf	??_sprintf,w
  2314  04CA  07B9               	addwf	sprintf@sp,f
  2315  04CB                     l1724:	
  2316  04CB  30FF               	movlw	255
  2317  04CC  07B6               	addwf	sprintf@width,f
  2318  04CD  30FF               	movlw	255
  2319  04CE  3DB7               	addwfc	sprintf@width+1,f
  2320  04CF  0A36               	incf	sprintf@width,w
  2321  04D0  1D03               	skipz
  2322  04D1  2CC0               	goto	l1720
  2323  04D2  0A37               	incf	sprintf@width+1,w
  2324  04D3  1903               	btfsc	3,2
  2325  04D4  2CE8               	goto	l1732
  2326  04D5  2CC0               	goto	l1720
  2327  04D6                     l1726:	
  2328                           ;doprnt.c: 767: while(len--)
  2329                           
  2330                           
  2331                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2332  04D6  082F               	movf	sprintf@cp,w
  2333  04D7  0086               	movwf	6
  2334  04D8  0187               	clrf	7
  2335  04D9  0801               	movf	1,w
  2336  04DA  00A4               	movwf	??_sprintf
  2337  04DB  0839               	movf	sprintf@sp,w
  2338  04DC  0086               	movwf	6
  2339  04DD  0187               	clrf	7
  2340  04DE  0824               	movf	??_sprintf,w
  2341  04DF  0081               	movwf	1
  2342  04E0  3001               	movlw	1
  2343  04E1  00A4               	movwf	??_sprintf
  2344  04E2  0824               	movf	??_sprintf,w
  2345  04E3  07AF               	addwf	sprintf@cp,f
  2346  04E4  3001               	movlw	1
  2347  04E5  00A4               	movwf	??_sprintf
  2348  04E6  0824               	movf	??_sprintf,w
  2349  04E7  07B9               	addwf	sprintf@sp,f
  2350  04E8                     l1732:	
  2351  04E8  3001               	movlw	1
  2352  04E9  02B0               	subwf	sprintf@len,f
  2353  04EA  3000               	movlw	0
  2354  04EB  3BB1               	subwfb	sprintf@len+1,f
  2355  04EC  0A30               	incf	sprintf@len,w
  2356  04ED  1D03               	skipz
  2357  04EE  2CD6               	goto	l1726
  2358  04EF  0A31               	incf	sprintf@len+1,w
  2359  04F0  1D03               	btfss	3,2
  2360  04F1  2CD6               	goto	l1726
  2361                           
  2362                           ;doprnt.c: 770: if(flag & 0x08)
  2363  04F2  19BA               	btfsc	sprintf@flag,3
  2364  04F3  2D00               	goto	l1740
  2365  04F4  2BB1               	goto	l1964
  2366  04F5                     l1736:	
  2367                           ;doprnt.c: 771: while(width--)
  2368                           
  2369                           
  2370                           ;doprnt.c: 772: ((*sp++ = (' ')));
  2371  04F5  3020               	movlw	32
  2372  04F6  00A4               	movwf	??_sprintf
  2373  04F7  0839               	movf	sprintf@sp,w
  2374  04F8  0086               	movwf	6
  2375  04F9  0187               	clrf	7
  2376  04FA  0824               	movf	??_sprintf,w
  2377  04FB  0081               	movwf	1
  2378  04FC  3001               	movlw	1
  2379  04FD  00A4               	movwf	??_sprintf
  2380  04FE  0824               	movf	??_sprintf,w
  2381  04FF  07B9               	addwf	sprintf@sp,f
  2382  0500                     l1740:	
  2383  0500  30FF               	movlw	255
  2384  0501  07B6               	addwf	sprintf@width,f
  2385  0502  30FF               	movlw	255
  2386  0503  3DB7               	addwfc	sprintf@width+1,f
  2387  0504  0A36               	incf	sprintf@width,w
  2388  0505  1D03               	skipz
  2389  0506  2CF5               	goto	l1736
  2390  0507  0A37               	incf	sprintf@width+1,w
  2391  0508  1903               	btfsc	3,2
  2392  0509  2BB1               	goto	l1964
  2393  050A  2CF5               	goto	l1736
  2394  050B                     l1742:	
  2395                           ;doprnt.c: 784: case 'c':
  2396                           
  2397                           ;doprnt.c: 774: continue;
  2398                           
  2399                           
  2400                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2401  050B  0832               	movf	sprintf@ap,w
  2402  050C  0086               	movwf	6
  2403  050D  0187               	clrf	7
  2404  050E  0801               	movf	1,w
  2405  050F  00A4               	movwf	??_sprintf
  2406  0510  0824               	movf	??_sprintf,w
  2407  0511  00B8               	movwf	sprintf@c
  2408  0512  3002               	movlw	2
  2409  0513  00A4               	movwf	??_sprintf
  2410  0514  0824               	movf	??_sprintf,w
  2411  0515  07B2               	addwf	sprintf@ap,f
  2412  0516                     l1746:	
  2413                           ;doprnt.c: 802: default:
  2414                           
  2415                           
  2416                           ;doprnt.c: 805: cp = (char *)&c;
  2417  0516  3038               	movlw	(low (sprintf@c| 0))& (0+255)
  2418  0517  00A4               	movwf	??_sprintf
  2419  0518  0824               	movf	??_sprintf,w
  2420  0519  00AF               	movwf	sprintf@cp
  2421                           
  2422                           ;doprnt.c: 806: len = 1;
  2423  051A  3001               	movlw	1
  2424  051B  00B0               	movwf	sprintf@len
  2425  051C  3000               	movlw	0
  2426  051D  00B1               	movwf	sprintf@len+1
  2427                           
  2428                           ;doprnt.c: 807: goto dostring;
  2429  051E  2C99               	goto	l1704
  2430  051F                     l1750:	
  2431                           ;doprnt.c: 817: case 'u':
  2432                           
  2433                           
  2434                           ;doprnt.c: 818: flag |= 0xC0;
  2435  051F  30C0               	movlw	192
  2436  0520  04BA               	iorwf	sprintf@flag,f
  2437  0521  3000               	movlw	0
  2438  0522  04BB               	iorwf	sprintf@flag+1,f
  2439                           
  2440                           ;doprnt.c: 822: }
  2441                           
  2442                           ;doprnt.c: 819: break;
  2443  0523  2D4B               	goto	l1756
  2444  0524                     l1754:	
  2445  0524  0020               	movlb	0	; select bank0
  2446  0525  0821               	movf	sprintf@f+1,w
  2447  0526  00A5               	movwf	??_sprintf+1
  2448  0527  0820               	movf	sprintf@f,w
  2449  0528  00A4               	movwf	??_sprintf
  2450  0529  0AA0               	incf	sprintf@f,f
  2451  052A  1903               	skipnz
  2452  052B  0AA1               	incf	sprintf@f+1,f
  2453  052C  0824               	movf	??_sprintf,w
  2454  052D  0084               	movwf	4
  2455  052E  0825               	movf	??_sprintf+1,w
  2456  052F  0085               	movwf	5
  2457  0530  0800               	movf	0,w	;code access
  2458  0531  00B8               	movwf	sprintf@c
  2459                           
  2460                           ; Switch size 1, requested type "space"
  2461                           ; Number of cases is 8, Range of values is 0 to 120
  2462                           ; switch strategies available:
  2463                           ; Name         Instructions Cycles
  2464                           ; simple_byte           25    13 (average)
  2465                           ; direct_byte          248     6 (fixed)
  2466                           ; jumptable            260     6 (fixed)
  2467                           ;	Chosen strategy is simple_byte
  2468  0532  3A00               	xorlw	0	; case 0
  2469  0533  1903               	skipnz
  2470  0534  2FF9               	goto	l1966
  2471  0535  3A58               	xorlw	88	; case 88
  2472  0536  1903               	skipnz
  2473  0537  2C96               	goto	l237
  2474  0538  3A3B               	xorlw	59	; case 99
  2475  0539  1903               	skipnz
  2476  053A  2D0B               	goto	l1742
  2477  053B  3A07               	xorlw	7	; case 100
  2478  053C  1903               	skipnz
  2479  053D  2D4B               	goto	l1756
  2480  053E  3A0D               	xorlw	13	; case 105
  2481  053F  1903               	skipnz
  2482  0540  2D4B               	goto	l1756
  2483  0541  3A06               	xorlw	6	; case 111
  2484  0542  1903               	skipnz
  2485  0543  2C94               	goto	l233
  2486  0544  3A1A               	xorlw	26	; case 117
  2487  0545  1903               	skipnz
  2488  0546  2D1F               	goto	l1750
  2489  0547  3A0D               	xorlw	13	; case 120
  2490  0548  1903               	skipnz
  2491  0549  2C97               	goto	l238
  2492  054A  2D16               	goto	l1746
  2493  054B                     l1756:	
  2494                           
  2495                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2496  054B  30C0               	movlw	192
  2497  054C  053A               	andwf	sprintf@flag,w
  2498  054D  00A4               	movwf	??_sprintf
  2499  054E  3000               	movlw	0
  2500  054F  053B               	andwf	sprintf@flag+1,w
  2501  0550  00A5               	movwf	??_sprintf+1
  2502  0551  0824               	movf	??_sprintf,w
  2503  0552  0425               	iorwf	??_sprintf+1,w
  2504  0553  1D03               	btfss	3,2
  2505  0554  2D6C               	goto	l1768
  2506                           
  2507                           ;doprnt.c: 1253: {
  2508                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2509  0555  0832               	movf	sprintf@ap,w
  2510  0556  0086               	movwf	6
  2511  0557  0187               	clrf	7
  2512  0558  3F40               	moviw [0]fsr1
  2513  0559  00B3               	movwf	sprintf@val
  2514  055A  3F41               	moviw [1]fsr1
  2515  055B  00B4               	movwf	sprintf@val+1
  2516  055C  3002               	movlw	2
  2517  055D  00A4               	movwf	??_sprintf
  2518  055E  0824               	movf	??_sprintf,w
  2519  055F  07B2               	addwf	sprintf@ap,f
  2520                           
  2521                           ;doprnt.c: 1261: if((int)val < 0) {
  2522  0560  1FB4               	btfss	sprintf@val+1,7
  2523  0561  2D77               	goto	l1772
  2524                           
  2525                           ;doprnt.c: 1262: flag |= 0x03;
  2526  0562  3003               	movlw	3
  2527  0563  04BA               	iorwf	sprintf@flag,f
  2528  0564  3000               	movlw	0
  2529  0565  04BB               	iorwf	sprintf@flag+1,f
  2530                           
  2531                           ;doprnt.c: 1263: val = -val;
  2532  0566  09B3               	comf	sprintf@val,f
  2533  0567  09B4               	comf	sprintf@val+1,f
  2534  0568  0AB3               	incf	sprintf@val,f
  2535  0569  1903               	skipnz
  2536  056A  0AB4               	incf	sprintf@val+1,f
  2537                           
  2538                           ;doprnt.c: 1264: }
  2539                           ;doprnt.c: 1266: }
  2540  056B  2D77               	goto	l1772
  2541  056C                     l1768:	
  2542                           
  2543                           ;doprnt.c: 1268: else
  2544                           ;doprnt.c: 1273: {
  2545                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2546  056C  0832               	movf	sprintf@ap,w
  2547  056D  0086               	movwf	6
  2548  056E  0187               	clrf	7
  2549  056F  3F40               	moviw [0]fsr1
  2550  0570  00B3               	movwf	sprintf@val
  2551  0571  3F41               	moviw [1]fsr1
  2552  0572  00B4               	movwf	sprintf@val+1
  2553  0573  3002               	movlw	2
  2554  0574  00A4               	movwf	??_sprintf
  2555  0575  0824               	movf	??_sprintf,w
  2556  0576  07B2               	addwf	sprintf@ap,f
  2557  0577                     l1772:	
  2558                           
  2559                           ;doprnt.c: 1287: }
  2560                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2561  0577  0835               	movf	sprintf@prec,w
  2562  0578  1D03               	btfss	3,2
  2563  0579  2DE9               	goto	l1810
  2564  057A  0833               	movf	sprintf@val,w
  2565  057B  0434               	iorwf	sprintf@val+1,w
  2566  057C  1D03               	btfss	3,2
  2567  057D  2DE9               	goto	l1810
  2568                           
  2569                           ;doprnt.c: 1291: prec++;
  2570  057E  3001               	movlw	1
  2571  057F  00A4               	movwf	??_sprintf
  2572  0580  0824               	movf	??_sprintf,w
  2573  0581  07B5               	addwf	sprintf@prec,f
  2574                           
  2575                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2576  0582  2DE9               	goto	l1810
  2577  0583                     l263:	
  2578                           ;doprnt.c: 1299: case 0x00:
  2579                           
  2580                           
  2581                           ;doprnt.c: 1302: case 0xC0:
  2582                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2583  0583  01B8               	clrf	sprintf@c
  2584  0584  0AB8               	incf	sprintf@c,f
  2585  0585                     L7:	
  2586  0585  3005               	movlw	5
  2587  0586  0638               	xorwf	sprintf@c,w
  2588  0587  1903               	btfsc	3,2
  2589  0588  2DF8               	goto	l1812
  2590                           
  2591                           ;doprnt.c: 1306: if(val < dpowers[c])
  2592  0589  0838               	movf	sprintf@c,w
  2593  058A  00A4               	movwf	??_sprintf
  2594  058B  01A5               	clrf	??_sprintf+1
  2595  058C  35A4               	lslf	??_sprintf,f
  2596  058D  0DA5               	rlf	??_sprintf+1,f
  2597  058E  305B               	movlw	low (_dpowers| (0+32768))
  2598  058F  0724               	addwf	??_sprintf,w
  2599  0590  0084               	movwf	4
  2600  0591  3080               	movlw	high (_dpowers| (0+32768))
  2601  0592  3D25               	addwfc	??_sprintf+1,w
  2602  0593  0085               	movwf	5
  2603  0594  3F00               	moviw [0]fsr0
  2604  0595  00A6               	movwf	??_sprintf+2
  2605  0596  3F01               	moviw [1]fsr0
  2606  0597  00A7               	movwf	??_sprintf+3
  2607  0598  0827               	movf	??_sprintf+3,w
  2608  0599  0234               	subwf	sprintf@val+1,w
  2609  059A  1D03               	skipz
  2610  059B  2D9E               	goto	u1715
  2611  059C  0826               	movf	??_sprintf+2,w
  2612  059D  0233               	subwf	sprintf@val,w
  2613  059E                     u1715:	
  2614  059E  1C03               	btfss	3,0
  2615  059F  2DF8               	goto	l1812
  2616                           
  2617                           ;doprnt.c: 1307: break;
  2618  05A0  3001               	movlw	1
  2619  05A1  00A4               	movwf	??_sprintf
  2620  05A2  0824               	movf	??_sprintf,w
  2621  05A3  07B8               	addwf	sprintf@c,f
  2622  05A4  2D85               	goto	L7
  2623  05A5                     l268:	
  2624                           ;doprnt.c: 1314: case 0x80:
  2625                           
  2626                           ;doprnt.c: 1309: break;
  2627                           
  2628                           
  2629                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2630  05A5  01B8               	clrf	sprintf@c
  2631  05A6  0AB8               	incf	sprintf@c,f
  2632  05A7                     L8:	
  2633  05A7  3004               	movlw	4
  2634  05A8  0638               	xorwf	sprintf@c,w
  2635  05A9  1903               	btfsc	3,2
  2636  05AA  2DF8               	goto	l1812
  2637                           
  2638                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2639  05AB  0838               	movf	sprintf@c,w
  2640  05AC  00A4               	movwf	??_sprintf
  2641  05AD  01A5               	clrf	??_sprintf+1
  2642  05AE  35A4               	lslf	??_sprintf,f
  2643  05AF  0DA5               	rlf	??_sprintf+1,f
  2644  05B0  3039               	movlw	low (_hexpowers| (0+32768))
  2645  05B1  0724               	addwf	??_sprintf,w
  2646  05B2  0084               	movwf	4
  2647  05B3  3081               	movlw	high (_hexpowers| (0+32768))
  2648  05B4  3D25               	addwfc	??_sprintf+1,w
  2649  05B5  0085               	movwf	5
  2650  05B6  3F00               	moviw [0]fsr0
  2651  05B7  00A6               	movwf	??_sprintf+2
  2652  05B8  3F01               	moviw [1]fsr0
  2653  05B9  00A7               	movwf	??_sprintf+3
  2654  05BA  0827               	movf	??_sprintf+3,w
  2655  05BB  0234               	subwf	sprintf@val+1,w
  2656  05BC  1D03               	skipz
  2657  05BD  2DC0               	goto	u1745
  2658  05BE  0826               	movf	??_sprintf+2,w
  2659  05BF  0233               	subwf	sprintf@val,w
  2660  05C0                     u1745:	
  2661  05C0  1C03               	btfss	3,0
  2662  05C1  2DF8               	goto	l1812
  2663                           
  2664                           ;doprnt.c: 1318: break;
  2665  05C2  3001               	movlw	1
  2666  05C3  00A4               	movwf	??_sprintf
  2667  05C4  0824               	movf	??_sprintf,w
  2668  05C5  07B8               	addwf	sprintf@c,f
  2669  05C6  2DA7               	goto	L8
  2670  05C7                     l272:	
  2671                           ;doprnt.c: 1326: case 0x40:
  2672                           
  2673                           ;doprnt.c: 1320: break;
  2674                           
  2675                           
  2676                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  2677  05C7  01B8               	clrf	sprintf@c
  2678  05C8  0AB8               	incf	sprintf@c,f
  2679  05C9                     L9:	
  2680  05C9  3006               	movlw	6
  2681  05CA  0638               	xorwf	sprintf@c,w
  2682  05CB  1903               	btfsc	3,2
  2683  05CC  2DF8               	goto	l1812
  2684                           
  2685                           ;doprnt.c: 1329: if(val < octpowers[c])
  2686  05CD  0838               	movf	sprintf@c,w
  2687  05CE  00A4               	movwf	??_sprintf
  2688  05CF  01A5               	clrf	??_sprintf+1
  2689  05D0  35A4               	lslf	??_sprintf,f
  2690  05D1  0DA5               	rlf	??_sprintf+1,f
  2691  05D2  307C               	movlw	low (_octpowers| (0+32768))
  2692  05D3  0724               	addwf	??_sprintf,w
  2693  05D4  0084               	movwf	4
  2694  05D5  3080               	movlw	high (_octpowers| (0+32768))
  2695  05D6  3D25               	addwfc	??_sprintf+1,w
  2696  05D7  0085               	movwf	5
  2697  05D8  3F00               	moviw [0]fsr0
  2698  05D9  00A6               	movwf	??_sprintf+2
  2699  05DA  3F01               	moviw [1]fsr0
  2700  05DB  00A7               	movwf	??_sprintf+3
  2701  05DC  0827               	movf	??_sprintf+3,w
  2702  05DD  0234               	subwf	sprintf@val+1,w
  2703  05DE  1D03               	skipz
  2704  05DF  2DE2               	goto	u1775
  2705  05E0  0826               	movf	??_sprintf+2,w
  2706  05E1  0233               	subwf	sprintf@val,w
  2707  05E2                     u1775:	
  2708  05E2  1C03               	btfss	3,0
  2709  05E3  2DF8               	goto	l1812
  2710                           
  2711                           ;doprnt.c: 1330: break;
  2712  05E4  3001               	movlw	1
  2713  05E5  00A4               	movwf	??_sprintf
  2714  05E6  0824               	movf	??_sprintf,w
  2715  05E7  07B8               	addwf	sprintf@c,f
  2716  05E8  2DC9               	goto	L9
  2717  05E9                     l1810:	
  2718                           ;doprnt.c: 1336: }
  2719                           
  2720                           ;doprnt.c: 1332: break;
  2721                           
  2722  05E9  083A               	movf	sprintf@flag,w
  2723  05EA  39C0               	andlw	192
  2724                           
  2725                           ; Switch size 1, requested type "space"
  2726                           ; Number of cases is 4, Range of values is 0 to 192
  2727                           ; switch strategies available:
  2728                           ; Name         Instructions Cycles
  2729                           ; simple_byte           13     7 (average)
  2730                           ; jumptable            260     6 (fixed)
  2731                           ;	Chosen strategy is simple_byte
  2732  05EB  3A00               	xorlw	0	; case 0
  2733  05EC  1903               	skipnz
  2734  05ED  2D83               	goto	l263
  2735  05EE  3A40               	xorlw	64	; case 64
  2736  05EF  1903               	skipnz
  2737  05F0  2DC7               	goto	l272
  2738  05F1  3AC0               	xorlw	192	; case 128
  2739  05F2  1903               	skipnz
  2740  05F3  2DA5               	goto	l268
  2741  05F4  3A40               	xorlw	64	; case 192
  2742  05F5  1903               	skipnz
  2743  05F6  2D83               	goto	l263
  2744  05F7  2DF8               	goto	l1812
  2745  05F8                     l1812:	
  2746                           
  2747                           ;doprnt.c: 1339: if(c < prec)
  2748  05F8  0838               	movf	sprintf@c,w
  2749  05F9  3A80               	xorlw	128
  2750  05FA  00A4               	movwf	??_sprintf
  2751  05FB  0835               	movf	sprintf@prec,w
  2752  05FC  3A80               	xorlw	128
  2753  05FD  02A4               	subwf	??_sprintf,f
  2754  05FE  1803               	skipnc
  2755  05FF  2E05               	goto	l1816
  2756                           
  2757                           ;doprnt.c: 1340: c = prec;
  2758  0600  0835               	movf	sprintf@prec,w
  2759  0601  00A4               	movwf	??_sprintf
  2760  0602  0824               	movf	??_sprintf,w
  2761  0603  00B8               	movwf	sprintf@c
  2762  0604  2E11               	goto	l1820
  2763  0605                     l1816:	
  2764                           
  2765                           ;doprnt.c: 1341: else if(prec < c)
  2766  0605  0835               	movf	sprintf@prec,w
  2767  0606  3A80               	xorlw	128
  2768  0607  00A4               	movwf	??_sprintf
  2769  0608  0838               	movf	sprintf@c,w
  2770  0609  3A80               	xorlw	128
  2771  060A  02A4               	subwf	??_sprintf,f
  2772  060B  1803               	skipnc
  2773  060C  2E11               	goto	l1820
  2774                           
  2775                           ;doprnt.c: 1342: prec = c;
  2776  060D  0838               	movf	sprintf@c,w
  2777  060E  00A4               	movwf	??_sprintf
  2778  060F  0824               	movf	??_sprintf,w
  2779  0610  00B5               	movwf	sprintf@prec
  2780  0611                     l1820:	
  2781                           
  2782                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2783  0611  0836               	movf	sprintf@width,w
  2784  0612  0437               	iorwf	sprintf@width+1,w
  2785  0613  1903               	btfsc	3,2
  2786  0614  2E23               	goto	l1826
  2787  0615  3003               	movlw	3
  2788  0616  053A               	andwf	sprintf@flag,w
  2789  0617  00A4               	movwf	??_sprintf
  2790  0618  3000               	movlw	0
  2791  0619  053B               	andwf	sprintf@flag+1,w
  2792  061A  00A5               	movwf	??_sprintf+1
  2793  061B  0824               	movf	??_sprintf,w
  2794  061C  0425               	iorwf	??_sprintf+1,w
  2795  061D  1903               	btfsc	3,2
  2796  061E  2E23               	goto	l1826
  2797                           
  2798                           ;doprnt.c: 1346: width--;
  2799  061F  30FF               	movlw	255
  2800  0620  07B6               	addwf	sprintf@width,f
  2801  0621  30FF               	movlw	255
  2802  0622  3DB7               	addwfc	sprintf@width+1,f
  2803  0623                     l1826:	
  2804                           
  2805                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2806  0623  1F3B               	btfss	sprintf@flag+1,6
  2807  0624  2E44               	goto	l1834
  2808                           
  2809                           ;doprnt.c: 1349: if(width > prec)
  2810  0625  0835               	movf	sprintf@prec,w
  2811  0626  00A4               	movwf	??_sprintf
  2812  0627  01A5               	clrf	??_sprintf+1
  2813  0628  1BA4               	btfsc	??_sprintf,7
  2814  0629  03A5               	decf	??_sprintf+1,f
  2815  062A  0825               	movf	??_sprintf+1,w
  2816  062B  3A80               	xorlw	128
  2817  062C  00A6               	movwf	??_sprintf+2
  2818  062D  0837               	movf	sprintf@width+1,w
  2819  062E  3A80               	xorlw	128
  2820  062F  0226               	subwf	??_sprintf+2,w
  2821  0630  1D03               	skipz
  2822  0631  2E34               	goto	u1845
  2823  0632  0836               	movf	sprintf@width,w
  2824  0633  0224               	subwf	??_sprintf,w
  2825  0634                     u1845:	
  2826  0634  1803               	skipnc
  2827  0635  2E41               	goto	l1832
  2828                           
  2829                           ;doprnt.c: 1350: width -= prec;
  2830  0636  0020               	movlb	0	; select bank0
  2831  0637  0835               	movf	sprintf@prec,w
  2832  0638  00A4               	movwf	??_sprintf
  2833  0639  01A5               	clrf	??_sprintf+1
  2834  063A  1BA4               	btfsc	??_sprintf,7
  2835  063B  03A5               	decf	??_sprintf+1,f
  2836  063C  0824               	movf	??_sprintf,w
  2837  063D  02B6               	subwf	sprintf@width,f
  2838  063E  0825               	movf	??_sprintf+1,w
  2839  063F  3BB7               	subwfb	sprintf@width+1,f
  2840  0640  2E44               	goto	l1834
  2841  0641                     l1832:	
  2842                           
  2843                           ;doprnt.c: 1351: else
  2844                           ;doprnt.c: 1352: width = 0;
  2845  0641  0020               	movlb	0	; select bank0
  2846  0642  01B6               	clrf	sprintf@width
  2847  0643  01B7               	clrf	sprintf@width+1
  2848  0644                     l1834:	
  2849                           
  2850                           ;doprnt.c: 1353: }
  2851                           ;doprnt.c: 1357: if((flag & (
  2852                           ;doprnt.c: 1359: 0x04|
  2853                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  2854  0644  30C4               	movlw	196
  2855  0645  053A               	andwf	sprintf@flag,w
  2856  0646  00A4               	movwf	??_sprintf
  2857  0647  3008               	movlw	8
  2858  0648  053B               	andwf	sprintf@flag+1,w
  2859  0649  00A5               	movwf	??_sprintf+1
  2860  064A  3040               	movlw	64
  2861  064B  0624               	xorwf	??_sprintf,w
  2862  064C  3008               	movlw	8
  2863  064D  1903               	skipnz
  2864  064E  0625               	xorwf	??_sprintf+1,w
  2865  064F  1D03               	btfss	3,2
  2866  0650  2E57               	goto	l1840
  2867                           
  2868                           ;doprnt.c: 1362: if(width)
  2869  0651  0836               	movf	sprintf@width,w
  2870  0652  0437               	iorwf	sprintf@width+1,w
  2871  0653  1903               	btfsc	3,2
  2872  0654  2E78               	goto	l1848
  2873                           
  2874                           ;doprnt.c: 1363: width--;
  2875  0655  30FF               	movlw	255
  2876  0656  2E71               	goto	L1
  2877  0657                     l1840:	
  2878                           ;doprnt.c: 1364: } else
  2879                           
  2880                           
  2881                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  2882  0657  30C0               	movlw	192
  2883  0658  053A               	andwf	sprintf@flag,w
  2884  0659  00A4               	movwf	??_sprintf
  2885  065A  3008               	movlw	8
  2886  065B  053B               	andwf	sprintf@flag+1,w
  2887  065C  00A5               	movwf	??_sprintf+1
  2888  065D  3080               	movlw	128
  2889  065E  0624               	xorwf	??_sprintf,w
  2890  065F  3008               	movlw	8
  2891  0660  1903               	skipnz
  2892  0661  0625               	xorwf	??_sprintf+1,w
  2893  0662  1D03               	btfss	3,2
  2894  0663  2E78               	goto	l1848
  2895                           
  2896                           ;doprnt.c: 1372: if(width > 2)
  2897  0664  0837               	movf	sprintf@width+1,w
  2898  0665  3A80               	xorlw	128
  2899  0666  00A4               	movwf	??_sprintf
  2900  0667  3080               	movlw	128
  2901  0668  0224               	subwf	??_sprintf,w
  2902  0669  1D03               	skipz
  2903  066A  2E6D               	goto	u1885
  2904  066B  3003               	movlw	3
  2905  066C  0236               	subwf	sprintf@width,w
  2906  066D                     u1885:	
  2907  066D  1C03               	skipc
  2908  066E  2E75               	goto	l1846
  2909                           
  2910                           ;doprnt.c: 1373: width -= 2;
  2911  066F  30FE               	movlw	254
  2912  0670  0020               	movlb	0	; select bank0
  2913  0671                     L1:	
  2914  0671  07B6               	addwf	sprintf@width,f
  2915  0672  30FF               	movlw	255
  2916  0673  3DB7               	addwfc	sprintf@width+1,f
  2917  0674  2E78               	goto	l1848
  2918  0675                     l1846:	
  2919                           
  2920                           ;doprnt.c: 1374: else
  2921                           ;doprnt.c: 1375: width = 0;
  2922  0675  0020               	movlb	0	; select bank0
  2923  0676  01B6               	clrf	sprintf@width
  2924  0677  01B7               	clrf	sprintf@width+1
  2925  0678                     l1848:	
  2926                           
  2927                           ;doprnt.c: 1376: }
  2928                           ;doprnt.c: 1381: if(width > c)
  2929  0678  0838               	movf	sprintf@c,w
  2930  0679  00A4               	movwf	??_sprintf
  2931  067A  01A5               	clrf	??_sprintf+1
  2932  067B  1BA4               	btfsc	??_sprintf,7
  2933  067C  03A5               	decf	??_sprintf+1,f
  2934  067D  0825               	movf	??_sprintf+1,w
  2935  067E  3A80               	xorlw	128
  2936  067F  00A6               	movwf	??_sprintf+2
  2937  0680  0837               	movf	sprintf@width+1,w
  2938  0681  3A80               	xorlw	128
  2939  0682  0226               	subwf	??_sprintf+2,w
  2940  0683  1D03               	skipz
  2941  0684  2E87               	goto	u1895
  2942  0685  0836               	movf	sprintf@width,w
  2943  0686  0224               	subwf	??_sprintf,w
  2944  0687                     u1895:	
  2945  0687  1803               	skipnc
  2946  0688  2E94               	goto	l1852
  2947                           
  2948                           ;doprnt.c: 1382: width -= c;
  2949  0689  0020               	movlb	0	; select bank0
  2950  068A  0838               	movf	sprintf@c,w
  2951  068B  00A4               	movwf	??_sprintf
  2952  068C  01A5               	clrf	??_sprintf+1
  2953  068D  1BA4               	btfsc	??_sprintf,7
  2954  068E  03A5               	decf	??_sprintf+1,f
  2955  068F  0824               	movf	??_sprintf,w
  2956  0690  02B6               	subwf	sprintf@width,f
  2957  0691  0825               	movf	??_sprintf+1,w
  2958  0692  3BB7               	subwfb	sprintf@width+1,f
  2959  0693  2E97               	goto	l1854
  2960  0694                     l1852:	
  2961                           
  2962                           ;doprnt.c: 1383: else
  2963                           ;doprnt.c: 1384: width = 0;
  2964  0694  0020               	movlb	0	; select bank0
  2965  0695  01B6               	clrf	sprintf@width
  2966  0696  01B7               	clrf	sprintf@width+1
  2967  0697                     l1854:	
  2968                           
  2969                           ;doprnt.c: 1387: if(flag & 0x04) {
  2970  0697  1D3A               	btfss	sprintf@flag,2
  2971  0698  2EE8               	goto	l1890
  2972                           
  2973                           ;doprnt.c: 1392: if(flag & 0x03)
  2974  0699  3003               	movlw	3
  2975  069A  053A               	andwf	sprintf@flag,w
  2976  069B  00A4               	movwf	??_sprintf
  2977  069C  3000               	movlw	0
  2978  069D  053B               	andwf	sprintf@flag+1,w
  2979  069E  00A5               	movwf	??_sprintf+1
  2980  069F  0824               	movf	??_sprintf,w
  2981  06A0  0425               	iorwf	??_sprintf+1,w
  2982  06A1  1903               	btfsc	3,2
  2983  06A2  2EA5               	goto	l292
  2984                           
  2985                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  2986  06A3  302D               	movlw	45
  2987  06A4  2ECA               	goto	L10
  2988  06A5                     l292:	
  2989                           
  2990                           ;doprnt.c: 1396: else
  2991                           ;doprnt.c: 1399: if(flag & 0x01)
  2992  06A5  1C3A               	btfss	sprintf@flag,0
  2993  06A6  2EA9               	goto	l1866
  2994                           
  2995                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  2996  06A7  3020               	movlw	32
  2997  06A8  2ECA               	goto	L10
  2998  06A9                     l1866:	
  2999                           
  3000                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3001  06A9  30C0               	movlw	192
  3002  06AA  053A               	andwf	sprintf@flag,w
  3003  06AB  00A4               	movwf	??_sprintf
  3004  06AC  3008               	movlw	8
  3005  06AD  053B               	andwf	sprintf@flag+1,w
  3006  06AE  00A5               	movwf	??_sprintf+1
  3007  06AF  3080               	movlw	128
  3008  06B0  0624               	xorwf	??_sprintf,w
  3009  06B1  3008               	movlw	8
  3010  06B2  1903               	skipnz
  3011  06B3  0625               	xorwf	??_sprintf+1,w
  3012  06B4  1D03               	btfss	3,2
  3013  06B5  2ED4               	goto	l1882
  3014                           
  3015                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  3016  06B6  3030               	movlw	48
  3017  06B7  00A4               	movwf	??_sprintf
  3018  06B8  0839               	movf	sprintf@sp,w
  3019  06B9  0086               	movwf	6
  3020  06BA  0187               	clrf	7
  3021  06BB  0824               	movf	??_sprintf,w
  3022  06BC  0081               	movwf	1
  3023  06BD  3001               	movlw	1
  3024  06BE  00A4               	movwf	??_sprintf
  3025  06BF  0824               	movf	??_sprintf,w
  3026  06C0  07B9               	addwf	sprintf@sp,f
  3027                           
  3028                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  3029  06C1  1ABA               	btfsc	sprintf@flag,5
  3030  06C2  2EC5               	goto	l1876
  3031  06C3  3078               	movlw	120
  3032  06C4  2EC6               	goto	L2
  3033  06C5                     l1876:	
  3034  06C5  3058               	movlw	88
  3035  06C6                     L2:	
  3036  06C6  00A8               	movwf	_sprintf$383
  3037  06C7  3000               	movlw	0
  3038  06C8  00A9               	movwf	_sprintf$383+1
  3039  06C9  0828               	movf	_sprintf$383,w
  3040  06CA                     L10:	
  3041  06CA  00A4               	movwf	??_sprintf
  3042  06CB  0839               	movf	sprintf@sp,w
  3043  06CC  0086               	movwf	6
  3044  06CD  0187               	clrf	7
  3045  06CE  0824               	movf	??_sprintf,w
  3046  06CF  0081               	movwf	1
  3047  06D0  3001               	movlw	1
  3048  06D1  00A4               	movwf	??_sprintf
  3049  06D2  0824               	movf	??_sprintf,w
  3050  06D3  07B9               	addwf	sprintf@sp,f
  3051  06D4                     l1882:	
  3052                           
  3053                           ;doprnt.c: 1412: }
  3054                           ;doprnt.c: 1415: if(width)
  3055  06D4  0836               	movf	sprintf@width,w
  3056  06D5  0437               	iorwf	sprintf@width+1,w
  3057  06D6  1903               	btfsc	3,2
  3058  06D7  2FC0               	goto	l1954
  3059                           
  3060                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3061                           
  3062                           ;doprnt.c: 1416: do
  3063  06D8  3030               	movlw	48
  3064  06D9  00A4               	movwf	??_sprintf
  3065  06DA  0839               	movf	sprintf@sp,w
  3066  06DB  0086               	movwf	6
  3067  06DC  0187               	clrf	7
  3068  06DD  0824               	movf	??_sprintf,w
  3069  06DE  0081               	movwf	1
  3070  06DF  3001               	movlw	1
  3071  06E0  00A4               	movwf	??_sprintf
  3072  06E1  0824               	movf	??_sprintf,w
  3073  06E2  07B9               	addwf	sprintf@sp,f
  3074                           
  3075                           ;doprnt.c: 1418: while(--width);
  3076  06E3  30FF               	movlw	255
  3077  06E4  07B6               	addwf	sprintf@width,f
  3078  06E5  30FF               	movlw	255
  3079  06E6  3DB7               	addwfc	sprintf@width+1,f
  3080  06E7  2ED4               	goto	l1882
  3081  06E8                     l1890:	
  3082                           ;doprnt.c: 1420: } else
  3083                           
  3084                           
  3085                           ;doprnt.c: 1422: {
  3086                           ;doprnt.c: 1424: if(width
  3087                           ;doprnt.c: 1426: && !(flag & 0x08)
  3088                           ;doprnt.c: 1428: )
  3089  06E8  0836               	movf	sprintf@width,w
  3090  06E9  0437               	iorwf	sprintf@width+1,w
  3091  06EA  1D03               	btfss	3,2
  3092  06EB  19BA               	btfsc	sprintf@flag,3
  3093  06EC  2F00               	goto	l1900
  3094  06ED                     l1894:	
  3095                           ;doprnt.c: 1429: do
  3096                           
  3097                           
  3098                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3099  06ED  3020               	movlw	32
  3100  06EE  00A4               	movwf	??_sprintf
  3101  06EF  0839               	movf	sprintf@sp,w
  3102  06F0  0086               	movwf	6
  3103  06F1  0187               	clrf	7
  3104  06F2  0824               	movf	??_sprintf,w
  3105  06F3  0081               	movwf	1
  3106  06F4  3001               	movlw	1
  3107  06F5  00A4               	movwf	??_sprintf
  3108  06F6  0824               	movf	??_sprintf,w
  3109  06F7  07B9               	addwf	sprintf@sp,f
  3110                           
  3111                           ;doprnt.c: 1431: while(--width);
  3112  06F8  30FF               	movlw	255
  3113  06F9  07B6               	addwf	sprintf@width,f
  3114  06FA  30FF               	movlw	255
  3115  06FB  3DB7               	addwfc	sprintf@width+1,f
  3116  06FC  0836               	movf	sprintf@width,w
  3117  06FD  0437               	iorwf	sprintf@width+1,w
  3118  06FE  1D03               	btfss	3,2
  3119  06FF  2EED               	goto	l1894
  3120  0700                     l1900:	
  3121                           
  3122                           ;doprnt.c: 1438: if(flag & 0x03)
  3123  0700  3003               	movlw	3
  3124  0701  053A               	andwf	sprintf@flag,w
  3125  0702  00A4               	movwf	??_sprintf
  3126  0703  3000               	movlw	0
  3127  0704  053B               	andwf	sprintf@flag+1,w
  3128  0705  00A5               	movwf	??_sprintf+1
  3129  0706  0824               	movf	??_sprintf,w
  3130  0707  0425               	iorwf	??_sprintf+1,w
  3131  0708  1903               	btfsc	3,2
  3132  0709  2F0C               	goto	l308
  3133                           
  3134                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3135  070A  302D               	movlw	45
  3136  070B  2F0F               	goto	L11
  3137  070C                     l308:	
  3138                           
  3139                           ;doprnt.c: 1443: else if(flag & 0x01)
  3140  070C  1C3A               	btfss	sprintf@flag,0
  3141  070D  2F19               	goto	l1910
  3142                           
  3143                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  3144  070E  3020               	movlw	32
  3145  070F                     L11:	
  3146  070F  00A4               	movwf	??_sprintf
  3147  0710  0839               	movf	sprintf@sp,w
  3148  0711  0086               	movwf	6
  3149  0712  0187               	clrf	7
  3150  0713  0824               	movf	??_sprintf,w
  3151  0714  0081               	movwf	1
  3152  0715  3001               	movlw	1
  3153  0716  00A4               	movwf	??_sprintf
  3154  0717  0824               	movf	??_sprintf,w
  3155  0718  07B9               	addwf	sprintf@sp,f
  3156  0719                     l1910:	
  3157                           
  3158                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  3159  0719  30C0               	movlw	192
  3160  071A  053A               	andwf	sprintf@flag,w
  3161  071B  00A4               	movwf	??_sprintf
  3162  071C  3008               	movlw	8
  3163  071D  053B               	andwf	sprintf@flag+1,w
  3164  071E  00A5               	movwf	??_sprintf+1
  3165  071F  3040               	movlw	64
  3166  0720  0624               	xorwf	??_sprintf,w
  3167  0721  3008               	movlw	8
  3168  0722  1903               	skipnz
  3169  0723  0625               	xorwf	??_sprintf+1,w
  3170  0724  1D03               	btfss	3,2
  3171  0725  2F28               	goto	l1916
  3172                           
  3173                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  3174  0726  3030               	movlw	48
  3175  0727  2FB6               	goto	L12
  3176  0728                     l1916:	
  3177                           
  3178                           ;doprnt.c: 1450: else
  3179                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3180  0728  30C0               	movlw	192
  3181  0729  053A               	andwf	sprintf@flag,w
  3182  072A  00A4               	movwf	??_sprintf
  3183  072B  3008               	movlw	8
  3184  072C  053B               	andwf	sprintf@flag+1,w
  3185  072D  00A5               	movwf	??_sprintf+1
  3186  072E  3080               	movlw	128
  3187  072F  0624               	xorwf	??_sprintf,w
  3188  0730  3008               	movlw	8
  3189  0731  1903               	skipnz
  3190  0732  0625               	xorwf	??_sprintf+1,w
  3191  0733  1D03               	btfss	3,2
  3192  0734  2FC0               	goto	l1954
  3193                           
  3194                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  3195  0735  3030               	movlw	48
  3196  0736  00A4               	movwf	??_sprintf
  3197  0737  0839               	movf	sprintf@sp,w
  3198  0738  0086               	movwf	6
  3199  0739  0187               	clrf	7
  3200  073A  0824               	movf	??_sprintf,w
  3201  073B  0081               	movwf	1
  3202  073C  3001               	movlw	1
  3203  073D  00A4               	movwf	??_sprintf
  3204  073E  0824               	movf	??_sprintf,w
  3205  073F  07B9               	addwf	sprintf@sp,f
  3206                           
  3207                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  3208  0740  1ABA               	btfsc	sprintf@flag,5
  3209  0741  2F44               	goto	l1926
  3210  0742  3078               	movlw	120
  3211  0743  2F45               	goto	L3
  3212  0744                     l1926:	
  3213  0744  3058               	movlw	88
  3214  0745                     L3:	
  3215  0745  00AA               	movwf	_sprintf$384
  3216  0746  3000               	movlw	0
  3217  0747  00AB               	movwf	_sprintf$384+1
  3218  0748  082A               	movf	_sprintf$384,w
  3219  0749  2FB6               	goto	L12
  3220  074A                     l1932:	
  3221                           ;doprnt.c: 1478: {
  3222                           ;doprnt.c: 1483: case 0x00:
  3223                           
  3224                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  3225                           
  3226                           ;doprnt.c: 1466: }
  3227                           ;doprnt.c: 1469: }
  3228                           ;doprnt.c: 1474: while(prec--) {
  3229                           
  3230                           
  3231                           ;doprnt.c: 1486: case 0xC0:
  3232                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3233  074A  300A               	movlw	10
  3234  074B  00F8               	movwf	___lwmod@divisor
  3235  074C  3000               	movlw	0
  3236  074D  00F9               	movwf	___lwmod@divisor+1
  3237  074E  0835               	movf	sprintf@prec,w
  3238  074F  00A4               	movwf	??_sprintf
  3239  0750  01A5               	clrf	??_sprintf+1
  3240  0751  35A4               	lslf	??_sprintf,f
  3241  0752  0DA5               	rlf	??_sprintf+1,f
  3242  0753  305B               	movlw	low (_dpowers| (0+32768))
  3243  0754  0724               	addwf	??_sprintf,w
  3244  0755  0084               	movwf	4
  3245  0756  3080               	movlw	high (_dpowers| (0+32768))
  3246  0757  3D25               	addwfc	??_sprintf+1,w
  3247  0758  0085               	movwf	5
  3248  0759  3F00               	moviw [0]fsr0
  3249  075A  00F0               	movwf	___lwdiv@divisor
  3250  075B  3F01               	moviw [1]fsr0
  3251  075C  00F1               	movwf	___lwdiv@divisor+1
  3252  075D  0834               	movf	sprintf@val+1,w
  3253  075E  00F3               	movwf	___lwdiv@dividend+1
  3254  075F  0833               	movf	sprintf@val,w
  3255  0760  00F2               	movwf	___lwdiv@dividend
  3256  0761  21A3               	fcall	___lwdiv
  3257  0762  0871               	movf	?___lwdiv+1,w
  3258  0763  00FB               	movwf	___lwmod@dividend+1
  3259  0764  0870               	movf	?___lwdiv,w
  3260  0765  00FA               	movwf	___lwmod@dividend
  3261  0766  2177               	fcall	___lwmod
  3262  0767  0878               	movf	?___lwmod,w
  3263  0768  2FB0               	goto	L13
  3264  0769                     l1934:	
  3265                           ;doprnt.c: 1497: case 0x80:
  3266                           
  3267                           ;doprnt.c: 1491: break;
  3268                           
  3269                           
  3270                           ;doprnt.c: 1499: {
  3271                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3272  0769  0835               	movf	sprintf@prec,w
  3273  076A  00A4               	movwf	??_sprintf
  3274  076B  01A5               	clrf	??_sprintf+1
  3275  076C  35A4               	lslf	??_sprintf,f
  3276  076D  0DA5               	rlf	??_sprintf+1,f
  3277  076E  3039               	movlw	low (_hexpowers| (0+32768))
  3278  076F  0724               	addwf	??_sprintf,w
  3279  0770  0084               	movwf	4
  3280  0771  3081               	movlw	high (_hexpowers| (0+32768))
  3281  0772  3D25               	addwfc	??_sprintf+1,w
  3282  0773  0085               	movwf	5
  3283  0774  3F00               	moviw [0]fsr0
  3284  0775  00F0               	movwf	___lwdiv@divisor
  3285  0776  3F01               	moviw [1]fsr0
  3286  0777  00F1               	movwf	___lwdiv@divisor+1
  3287  0778  0834               	movf	sprintf@val+1,w
  3288  0779  00F3               	movwf	___lwdiv@dividend+1
  3289  077A  0833               	movf	sprintf@val,w
  3290  077B  00F2               	movwf	___lwdiv@dividend
  3291  077C  21A3               	fcall	___lwdiv
  3292  077D  0870               	movf	?___lwdiv,w
  3293  077E  390F               	andlw	15
  3294  077F  0020               	movlb	0	; select bank0
  3295  0780  00A6               	movwf	??_sprintf+2
  3296  0781  0826               	movf	??_sprintf+2,w
  3297  0782  00AE               	movwf	sprintf@idx
  3298                           
  3299                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  3300  0783  1ABA               	btfsc	sprintf@flag,5
  3301  0784  2F89               	goto	l1940
  3302  0785  30D6               	movlw	low (STR_3| (0+32768))
  3303  0786  00AC               	movwf	_sprintf$390
  3304  0787  3080               	movlw	high (STR_3| (0+32768))
  3305  0788  2F8C               	goto	L5
  3306  0789                     l1940:	
  3307  0789  30E7               	movlw	low (STR_2| (0+32768))
  3308  078A  00AC               	movwf	_sprintf$390
  3309  078B  3080               	movlw	high (STR_2| (0+32768))
  3310  078C                     L5:	
  3311  078C  00AD               	movwf	_sprintf$390+1
  3312  078D  082D               	movf	_sprintf$390+1,w
  3313  078E  00A5               	movwf	??_sprintf+1
  3314  078F  082C               	movf	_sprintf$390,w
  3315  0790  00A4               	movwf	??_sprintf
  3316  0791  082E               	movf	sprintf@idx,w
  3317  0792  0724               	addwf	??_sprintf,w
  3318  0793  0084               	movwf	4
  3319  0794  0825               	movf	??_sprintf+1,w
  3320  0795  1803               	skipnc
  3321  0796  0A25               	incf	??_sprintf+1,w
  3322  0797  0085               	movwf	5
  3323  0798  0800               	movf	0,w	;code access
  3324  0799  2FB2               	goto	L6
  3325  079A                     l1944:	
  3326                           ;doprnt.c: 1516: case 0x40:
  3327                           
  3328                           ;doprnt.c: 1508: }
  3329                           ;doprnt.c: 1510: break;
  3330                           
  3331                           
  3332                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  3333  079A  0835               	movf	sprintf@prec,w
  3334  079B  00A4               	movwf	??_sprintf
  3335  079C  01A5               	clrf	??_sprintf+1
  3336  079D  35A4               	lslf	??_sprintf,f
  3337  079E  0DA5               	rlf	??_sprintf+1,f
  3338  079F  307C               	movlw	low (_octpowers| (0+32768))
  3339  07A0  0724               	addwf	??_sprintf,w
  3340  07A1  0084               	movwf	4
  3341  07A2  3080               	movlw	high (_octpowers| (0+32768))
  3342  07A3  3D25               	addwfc	??_sprintf+1,w
  3343  07A4  0085               	movwf	5
  3344  07A5  3F00               	moviw [0]fsr0
  3345  07A6  00F0               	movwf	___lwdiv@divisor
  3346  07A7  3F01               	moviw [1]fsr0
  3347  07A8  00F1               	movwf	___lwdiv@divisor+1
  3348  07A9  0834               	movf	sprintf@val+1,w
  3349  07AA  00F3               	movwf	___lwdiv@dividend+1
  3350  07AB  0833               	movf	sprintf@val,w
  3351  07AC  00F2               	movwf	___lwdiv@dividend
  3352  07AD  21A3               	fcall	___lwdiv
  3353  07AE  0870               	movf	?___lwdiv,w
  3354  07AF  3907               	andlw	7
  3355  07B0                     L13:	
  3356  07B0  3E30               	addlw	48
  3357  07B1  0020               	movlb	0	; select bank0
  3358  07B2                     L6:	
  3359  07B2  00A6               	movwf	??_sprintf+2
  3360  07B3  0826               	movf	??_sprintf+2,w
  3361  07B4  00B8               	movwf	sprintf@c
  3362  07B5                     l1950:	
  3363                           ;doprnt.c: 1523: }
  3364                           
  3365                           ;doprnt.c: 1520: break;
  3366                           
  3367                           
  3368                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3369  07B5  0838               	movf	sprintf@c,w
  3370  07B6                     L12:	
  3371  07B6  00A4               	movwf	??_sprintf
  3372  07B7  0839               	movf	sprintf@sp,w
  3373  07B8  0086               	movwf	6
  3374  07B9  0187               	clrf	7
  3375  07BA  0824               	movf	??_sprintf,w
  3376  07BB  0081               	movwf	1
  3377  07BC  3001               	movlw	1
  3378  07BD  00A4               	movwf	??_sprintf
  3379  07BE  0824               	movf	??_sprintf,w
  3380  07BF  07B9               	addwf	sprintf@sp,f
  3381  07C0                     l1954:	
  3382  07C0  30FF               	movlw	255
  3383  07C1  00A4               	movwf	??_sprintf
  3384  07C2  0824               	movf	??_sprintf,w
  3385  07C3  07B5               	addwf	sprintf@prec,f
  3386  07C4  0A35               	incf	sprintf@prec,w
  3387  07C5  1903               	btfsc	3,2
  3388  07C6  2FD7               	goto	l330
  3389  07C7  083A               	movf	sprintf@flag,w
  3390  07C8  39C0               	andlw	192
  3391                           
  3392                           ; Switch size 1, requested type "space"
  3393                           ; Number of cases is 4, Range of values is 0 to 192
  3394                           ; switch strategies available:
  3395                           ; Name         Instructions Cycles
  3396                           ; simple_byte           13     7 (average)
  3397                           ; jumptable            260     6 (fixed)
  3398                           ;	Chosen strategy is simple_byte
  3399  07C9  3A00               	xorlw	0	; case 0
  3400  07CA  1903               	skipnz
  3401  07CB  2F4A               	goto	l1932
  3402  07CC  3A40               	xorlw	64	; case 64
  3403  07CD  1903               	skipnz
  3404  07CE  2F9A               	goto	l1944
  3405  07CF  3AC0               	xorlw	192	; case 128
  3406  07D0  1903               	skipnz
  3407  07D1  2F69               	goto	l1934
  3408  07D2  3A40               	xorlw	64	; case 192
  3409  07D3  1903               	skipnz
  3410  07D4  2F4A               	goto	l1932
  3411  07D5  2FB5               	goto	l1950
  3412  07D6  2FB5               	goto	l1950
  3413  07D7                     l330:	
  3414                           
  3415                           ;doprnt.c: 1525: }
  3416                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  3417  07D7  1DBA               	btfss	sprintf@flag,3
  3418  07D8  2BB1               	goto	l1964
  3419  07D9  0837               	movf	sprintf@width+1,w
  3420  07DA  3A80               	xorlw	128
  3421  07DB  00A4               	movwf	??_sprintf
  3422  07DC  3080               	movlw	128
  3423  07DD  0224               	subwf	??_sprintf,w
  3424  07DE  1D03               	skipz
  3425  07DF  2FE2               	goto	u2085
  3426  07E0  3001               	movlw	1
  3427  07E1  0236               	subwf	sprintf@width,w
  3428  07E2                     u2085:	
  3429  07E2  1C03               	skipc
  3430  07E3  2BB1               	goto	l1964
  3431  07E4                     l1958:	
  3432                           ;doprnt.c: 1529: do
  3433                           
  3434                           
  3435                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  3436  07E4  3020               	movlw	32
  3437  07E5  0020               	movlb	0	; select bank0
  3438  07E6  00A4               	movwf	??_sprintf
  3439  07E7  0839               	movf	sprintf@sp,w
  3440  07E8  0086               	movwf	6
  3441  07E9  0187               	clrf	7
  3442  07EA  0824               	movf	??_sprintf,w
  3443  07EB  0081               	movwf	1
  3444  07EC  3001               	movlw	1
  3445  07ED  00A4               	movwf	??_sprintf
  3446  07EE  0824               	movf	??_sprintf,w
  3447  07EF  07B9               	addwf	sprintf@sp,f
  3448                           
  3449                           ;doprnt.c: 1531: while(--width);
  3450  07F0  30FF               	movlw	255
  3451  07F1  07B6               	addwf	sprintf@width,f
  3452  07F2  30FF               	movlw	255
  3453  07F3  3DB7               	addwfc	sprintf@width+1,f
  3454  07F4  0836               	movf	sprintf@width,w
  3455  07F5  0437               	iorwf	sprintf@width+1,w
  3456  07F6  1903               	btfsc	3,2
  3457  07F7  2BB1               	goto	l1964
  3458  07F8  2FE4               	goto	l1958
  3459  07F9                     l1966:	
  3460                           ;doprnt.c: 1533: }
  3461                           ;doprnt.c: 1535: alldone:
  3462                           
  3463                           
  3464                           ;doprnt.c: 1538: *sp = 0;
  3465  07F9  0839               	movf	sprintf@sp,w
  3466  07FA  0086               	movwf	6
  3467  07FB  0187               	clrf	7
  3468  07FC  0181               	clrf	1
  3469  07FD  0008               	return
  3470  07FE                     __end_of_sprintf:	
  3471                           ;doprnt.c: 1540: return 0;
  3472                           ;	Return value of _sprintf is never used
  3473                           
  3474                           
  3475                           	psect	text4
  3476  0088                     __ptext4:	
  3477 ;; *************** function _isdigit *****************
  3478 ;; Defined at:
  3479 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  c               1    wreg     unsigned char 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;  c               1    1[COMMON] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;		None               void
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMMON   BANK0   BANK1
  3493 ;;      Params:         0       0       0
  3494 ;;      Locals:         2       0       0
  3495 ;;      Temps:          0       0       0
  3496 ;;      Totals:         2       0       0
  3497 ;;Total ram usage:        2 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_sprintf
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           
  3507                           ;psect for function _isdigit
  3508  0088                     _isdigit:	
  3509                           
  3510                           ;incstack = 0
  3511                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3512                           ;isdigit@c stored from wreg
  3513  0088  00F1               	movwf	isdigit@c
  3514  0089  01F0               	clrf	_isdigit$576
  3515  008A  303A               	movlw	58
  3516  008B  0271               	subwf	isdigit@c,w
  3517  008C  1803               	skipnc
  3518  008D  2894               	goto	l1504
  3519  008E  3030               	movlw	48
  3520  008F  0271               	subwf	isdigit@c,w
  3521  0090  1C03               	skipc
  3522  0091  2894               	goto	l1504
  3523  0092  01F0               	clrf	_isdigit$576
  3524  0093  0AF0               	incf	_isdigit$576,f
  3525  0094                     l1504:	
  3526  0094  0C70               	rrf	_isdigit$576,w
  3527  0095  0008               	return
  3528  0096                     __end_of_isdigit:	
  3529                           
  3530                           	psect	text5
  3531  011E                     __ptext5:	
  3532 ;; *************** function ___wmul *****************
  3533 ;; Defined at:
  3534 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  multiplier      2    0[COMMON] unsigned int 
  3537 ;;  multiplicand    2    2[COMMON] unsigned int 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  product         2    4[COMMON] unsigned int 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  2    0[COMMON] unsigned int 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMMON   BANK0   BANK1
  3549 ;;      Params:         4       0       0
  3550 ;;      Locals:         2       0       0
  3551 ;;      Temps:          0       0       0
  3552 ;;      Totals:         6       0       0
  3553 ;;Total ram usage:        6 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_sprintf
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           
  3563                           ;psect for function ___wmul
  3564  011E                     ___wmul:	
  3565                           
  3566                           ;incstack = 0
  3567                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3568  011E  01F4               	clrf	___wmul@product
  3569  011F  01F5               	clrf	___wmul@product+1
  3570  0120                     l1510:	
  3571  0120  1C70               	btfss	___wmul@multiplier,0
  3572  0121  2926               	goto	l419
  3573  0122  0872               	movf	___wmul@multiplicand,w
  3574  0123  07F4               	addwf	___wmul@product,f
  3575  0124  0873               	movf	___wmul@multiplicand+1,w
  3576  0125  3DF5               	addwfc	___wmul@product+1,f
  3577  0126                     l419:	
  3578  0126  3001               	movlw	1
  3579  0127                     u1315:	
  3580  0127  35F2               	lslf	___wmul@multiplicand,f
  3581  0128  0DF3               	rlf	___wmul@multiplicand+1,f
  3582  0129  0B89               	decfsz	9,f
  3583  012A  2927               	goto	u1315
  3584  012B  3001               	movlw	1
  3585  012C                     u1325:	
  3586  012C  36F1               	lsrf	___wmul@multiplier+1,f
  3587  012D  0CF0               	rrf	___wmul@multiplier,f
  3588  012E  0B89               	decfsz	9,f
  3589  012F  292C               	goto	u1325
  3590  0130  0870               	movf	___wmul@multiplier,w
  3591  0131  0471               	iorwf	___wmul@multiplier+1,w
  3592  0132  1D03               	btfss	3,2
  3593  0133  2920               	goto	l1510
  3594  0134  0875               	movf	___wmul@product+1,w
  3595  0135  00F1               	movwf	?___wmul+1
  3596  0136  0874               	movf	___wmul@product,w
  3597  0137  00F0               	movwf	?___wmul
  3598  0138  0008               	return
  3599  0139                     __end_of___wmul:	
  3600                           
  3601                           	psect	text6
  3602  0177                     __ptext6:	
  3603 ;; *************** function ___lwmod *****************
  3604 ;; Defined at:
  3605 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  divisor         2    8[COMMON] unsigned int 
  3608 ;;  dividend        2   10[COMMON] unsigned int 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  counter         1   13[COMMON] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  2    8[COMMON] unsigned int 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMMON   BANK0   BANK1
  3620 ;;      Params:         4       0       0
  3621 ;;      Locals:         1       0       0
  3622 ;;      Temps:          1       0       0
  3623 ;;      Totals:         6       0       0
  3624 ;;Total ram usage:        6 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_sprintf
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           
  3634                           ;psect for function ___lwmod
  3635  0177                     ___lwmod:	
  3636                           
  3637                           ;incstack = 0
  3638                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3639  0177  0878               	movf	___lwmod@divisor,w
  3640  0178  0479               	iorwf	___lwmod@divisor+1,w
  3641  0179  1903               	btfsc	3,2
  3642  017A  299E               	goto	l1580
  3643  017B  01FD               	clrf	___lwmod@counter
  3644  017C  0AFD               	incf	___lwmod@counter,f
  3645  017D                     l1570:	
  3646  017D  1BF9               	btfsc	___lwmod@divisor+1,7
  3647  017E  2989               	goto	l1572
  3648  017F  3001               	movlw	1
  3649  0180                     u1445:	
  3650  0180  35F8               	lslf	___lwmod@divisor,f
  3651  0181  0DF9               	rlf	___lwmod@divisor+1,f
  3652  0182  0B89               	decfsz	9,f
  3653  0183  2980               	goto	u1445
  3654  0184  3001               	movlw	1
  3655  0185  00FC               	movwf	??___lwmod
  3656  0186  087C               	movf	??___lwmod,w
  3657  0187  07FD               	addwf	___lwmod@counter,f
  3658  0188  297D               	goto	l1570
  3659  0189                     l1572:	
  3660  0189  0879               	movf	___lwmod@divisor+1,w
  3661  018A  027B               	subwf	___lwmod@dividend+1,w
  3662  018B  1D03               	skipz
  3663  018C  298F               	goto	u1465
  3664  018D  0878               	movf	___lwmod@divisor,w
  3665  018E  027A               	subwf	___lwmod@dividend,w
  3666  018F                     u1465:	
  3667  018F  1C03               	skipc
  3668  0190  2995               	goto	l1576
  3669  0191  0878               	movf	___lwmod@divisor,w
  3670  0192  02FA               	subwf	___lwmod@dividend,f
  3671  0193  0879               	movf	___lwmod@divisor+1,w
  3672  0194  3BFB               	subwfb	___lwmod@dividend+1,f
  3673  0195                     l1576:	
  3674  0195  3001               	movlw	1
  3675  0196                     u1475:	
  3676  0196  36F9               	lsrf	___lwmod@divisor+1,f
  3677  0197  0CF8               	rrf	___lwmod@divisor,f
  3678  0198  0B89               	decfsz	9,f
  3679  0199  2996               	goto	u1475
  3680  019A  3001               	movlw	1
  3681  019B  02FD               	subwf	___lwmod@counter,f
  3682  019C  1D03               	btfss	3,2
  3683  019D  2989               	goto	l1572
  3684  019E                     l1580:	
  3685  019E  087B               	movf	___lwmod@dividend+1,w
  3686  019F  00F9               	movwf	?___lwmod+1
  3687  01A0  087A               	movf	___lwmod@dividend,w
  3688  01A1  00F8               	movwf	?___lwmod
  3689  01A2  0008               	return
  3690  01A3                     __end_of___lwmod:	
  3691                           
  3692                           	psect	text7
  3693  01A3                     __ptext7:	
  3694 ;; *************** function ___lwdiv *****************
  3695 ;; Defined at:
  3696 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  divisor         2    0[COMMON] unsigned int 
  3699 ;;  dividend        2    2[COMMON] unsigned int 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  quotient        2    5[COMMON] unsigned int 
  3702 ;;  counter         1    7[COMMON] unsigned char 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  2    0[COMMON] unsigned int 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1
  3712 ;;      Params:         4       0       0
  3713 ;;      Locals:         3       0       0
  3714 ;;      Temps:          1       0       0
  3715 ;;      Totals:         8       0       0
  3716 ;;Total ram usage:        8 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; This function calls:
  3719 ;;		Nothing
  3720 ;; This function is called by:
  3721 ;;		_sprintf
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           
  3726                           ;psect for function ___lwdiv
  3727  01A3                     ___lwdiv:	
  3728                           
  3729                           ;incstack = 0
  3730                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3731  01A3  01F5               	clrf	___lwdiv@quotient
  3732  01A4  01F6               	clrf	___lwdiv@quotient+1
  3733  01A5  0870               	movf	___lwdiv@divisor,w
  3734  01A6  0471               	iorwf	___lwdiv@divisor+1,w
  3735  01A7  1903               	btfsc	3,2
  3736  01A8  29D2               	goto	l1558
  3737  01A9  01F7               	clrf	___lwdiv@counter
  3738  01AA  0AF7               	incf	___lwdiv@counter,f
  3739  01AB                     l1546:	
  3740  01AB  1BF1               	btfsc	___lwdiv@divisor+1,7
  3741  01AC  29B7               	goto	l1548
  3742  01AD  3001               	movlw	1
  3743  01AE                     u1375:	
  3744  01AE  35F0               	lslf	___lwdiv@divisor,f
  3745  01AF  0DF1               	rlf	___lwdiv@divisor+1,f
  3746  01B0  0B89               	decfsz	9,f
  3747  01B1  29AE               	goto	u1375
  3748  01B2  3001               	movlw	1
  3749  01B3  00F4               	movwf	??___lwdiv
  3750  01B4  0874               	movf	??___lwdiv,w
  3751  01B5  07F7               	addwf	___lwdiv@counter,f
  3752  01B6  29AB               	goto	l1546
  3753  01B7                     l1548:	
  3754  01B7  3001               	movlw	1
  3755  01B8                     u1395:	
  3756  01B8  35F5               	lslf	___lwdiv@quotient,f
  3757  01B9  0DF6               	rlf	___lwdiv@quotient+1,f
  3758  01BA  0B89               	decfsz	9,f
  3759  01BB  29B8               	goto	u1395
  3760  01BC  0871               	movf	___lwdiv@divisor+1,w
  3761  01BD  0273               	subwf	___lwdiv@dividend+1,w
  3762  01BE  1D03               	skipz
  3763  01BF  29C2               	goto	u1405
  3764  01C0  0870               	movf	___lwdiv@divisor,w
  3765  01C1  0272               	subwf	___lwdiv@dividend,w
  3766  01C2                     u1405:	
  3767  01C2  1C03               	skipc
  3768  01C3  29C9               	goto	l1554
  3769  01C4  0870               	movf	___lwdiv@divisor,w
  3770  01C5  02F2               	subwf	___lwdiv@dividend,f
  3771  01C6  0871               	movf	___lwdiv@divisor+1,w
  3772  01C7  3BF3               	subwfb	___lwdiv@dividend+1,f
  3773  01C8  1475               	bsf	___lwdiv@quotient,0
  3774  01C9                     l1554:	
  3775  01C9  3001               	movlw	1
  3776  01CA                     u1415:	
  3777  01CA  36F1               	lsrf	___lwdiv@divisor+1,f
  3778  01CB  0CF0               	rrf	___lwdiv@divisor,f
  3779  01CC  0B89               	decfsz	9,f
  3780  01CD  29CA               	goto	u1415
  3781  01CE  3001               	movlw	1
  3782  01CF  02F7               	subwf	___lwdiv@counter,f
  3783  01D0  1D03               	btfss	3,2
  3784  01D1  29B7               	goto	l1548
  3785  01D2                     l1558:	
  3786  01D2  0876               	movf	___lwdiv@quotient+1,w
  3787  01D3  00F1               	movwf	?___lwdiv+1
  3788  01D4  0875               	movf	___lwdiv@quotient,w
  3789  01D5  00F0               	movwf	?___lwdiv
  3790  01D6  0008               	return
  3791  01D7                     __end_of___lwdiv:	
  3792                           
  3793                           	psect	text8
  3794  00C5                     __ptext8:	
  3795 ;; *************** function ___bmul *****************
  3796 ;; Defined at:
  3797 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul8.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;  multiplier      1    wreg     unsigned char 
  3800 ;;  multiplicand    1    0[COMMON] unsigned char 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  multiplier      1    3[COMMON] unsigned char 
  3803 ;;  product         1    2[COMMON] unsigned char 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      unsigned char 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2, status,0
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMMON   BANK0   BANK1
  3813 ;;      Params:         1       0       0
  3814 ;;      Locals:         2       0       0
  3815 ;;      Temps:          1       0       0
  3816 ;;      Totals:         4       0       0
  3817 ;;Total ram usage:        4 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; This function calls:
  3820 ;;		Nothing
  3821 ;; This function is called by:
  3822 ;;		_sprintf
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           
  3827                           ;psect for function ___bmul
  3828  00C5                     ___bmul:	
  3829                           
  3830                           ;incstack = 0
  3831                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3832                           ;___bmul@multiplier stored from wreg
  3833  00C5  00F3               	movwf	___bmul@multiplier
  3834  00C6  01F2               	clrf	___bmul@product
  3835  00C7                     l1524:	
  3836  00C7  1C73               	btfss	___bmul@multiplier,0
  3837  00C8  28CD               	goto	l1528
  3838  00C9  0870               	movf	___bmul@multiplicand,w
  3839  00CA  00F1               	movwf	??___bmul
  3840  00CB  0871               	movf	??___bmul,w
  3841  00CC  07F2               	addwf	___bmul@product,f
  3842  00CD                     l1528:	
  3843  00CD  1003               	clrc
  3844  00CE  0DF0               	rlf	___bmul@multiplicand,f
  3845  00CF  1003               	clrc
  3846  00D0  0CF3               	rrf	___bmul@multiplier,f
  3847  00D1  0873               	movf	___bmul@multiplier,w
  3848  00D2  1D03               	btfss	3,2
  3849  00D3  28C7               	goto	l1524
  3850  00D4  0872               	movf	___bmul@product,w
  3851  00D5  0008               	return
  3852  00D6                     __end_of___bmul:	
  3853                           
  3854                           	psect	text9
  3855  00B4                     __ptext9:	
  3856 ;; *************** function _sendString *****************
  3857 ;; Defined at:
  3858 ;;		line 12 in file "uart.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  str             1    wreg     PTR const unsigned char 
  3861 ;;		 -> addlog@buf(40), 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  str             1    2[COMMON] PTR const unsigned char 
  3864 ;;		 -> addlog@buf(40), 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      void 
  3867 ;; Registers used:
  3868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1
  3874 ;;      Params:         0       0       0
  3875 ;;      Locals:         1       0       0
  3876 ;;      Temps:          1       0       0
  3877 ;;      Totals:         2       0       0
  3878 ;;Total ram usage:        2 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    1
  3881 ;; This function calls:
  3882 ;;		_EUSART_Write
  3883 ;; This function is called by:
  3884 ;;		_addlog
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           
  3889                           ;psect for function _sendString
  3890  00B4                     _sendString:	
  3891                           
  3892                           ;incstack = 0
  3893                           ; Regs used in _sendString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3894                           ;sendString@str stored from wreg
  3895  00B4  00F2               	movwf	sendString@str
  3896  00B5                     l1634:	
  3897                           ;uart.c: 14: while( *str != '\0' )
  3898                           
  3899  00B5  0872               	movf	sendString@str,w
  3900  00B6  0086               	movwf	6
  3901  00B7  0187               	clrf	7
  3902  00B8  0801               	movf	1,w
  3903  00B9  1903               	btfsc	3,2
  3904  00BA  0008               	return
  3905                           
  3906                           ;uart.c: 15: EUSART_Write(*str++);
  3907  00BB  0872               	movf	sendString@str,w
  3908  00BC  0086               	movwf	6
  3909  00BD  0187               	clrf	7
  3910  00BE  0801               	movf	1,w
  3911  00BF  2053               	fcall	_EUSART_Write
  3912  00C0  3001               	movlw	1
  3913  00C1  00F1               	movwf	??_sendString
  3914  00C2  0871               	movf	??_sendString,w
  3915  00C3  07F2               	addwf	sendString@str,f
  3916  00C4  28B5               	goto	l1634
  3917  00C5                     __end_of_sendString:	
  3918                           
  3919                           	psect	text10
  3920  0053                     __ptext10:	
  3921 ;; *************** function _EUSART_Write *****************
  3922 ;; Defined at:
  3923 ;;		line 96 in file "mcc_generated_files/eusart.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  txData          1    wreg     unsigned char 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  txData          1    0[COMMON] unsigned char 
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  1    wreg      void 
  3930 ;; Registers used:
  3931 ;;		wreg
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1
  3937 ;;      Params:         0       0       0
  3938 ;;      Locals:         1       0       0
  3939 ;;      Temps:          0       0       0
  3940 ;;      Totals:         1       0       0
  3941 ;;Total ram usage:        1 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; This function calls:
  3944 ;;		Nothing
  3945 ;; This function is called by:
  3946 ;;		_sendString
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _EUSART_Write
  3952  0053                     _EUSART_Write:	
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _EUSART_Write: [wreg]
  3956                           ;EUSART_Write@txData stored from wreg
  3957  0053  00F0               	movwf	EUSART_Write@txData
  3958  0054                     l166:	
  3959                           ;eusart.c: 99: {
  3960                           
  3961                           ;eusart.c: 98: while(0 == PIR1bits.TXIF)
  3962                           
  3963  0054  0020               	movlb	0	; select bank0
  3964  0055  1E11               	btfss	17,4	;volatile
  3965  0056  2854               	goto	l166
  3966                           
  3967                           ;eusart.c: 100: }
  3968                           ;eusart.c: 102: TXREG = txData;
  3969  0057  0870               	movf	EUSART_Write@txData,w
  3970  0058  0023               	movlb	3	; select bank3
  3971  0059  009A               	movwf	26	;volatile
  3972  005A  0008               	return
  3973  005B                     __end_of_EUSART_Write:	
  3974                           
  3975                           	psect	text11
  3976  00F8                     __ptext11:	
  3977 ;; *************** function ___lwtoft *****************
  3978 ;; Defined at:
  3979 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  c               2    8[COMMON] unsigned int 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  3    8[COMMON] float 
  3986 ;; Registers used:
  3987 ;;		wreg, status,2, status,0, pclath, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMMON   BANK0   BANK1
  3993 ;;      Params:         3       0       0
  3994 ;;      Locals:         0       0       0
  3995 ;;      Temps:          1       0       0
  3996 ;;      Totals:         4       0       0
  3997 ;;Total ram usage:        4 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    1
  4000 ;; This function calls:
  4001 ;;		___ftpack
  4002 ;; This function is called by:
  4003 ;;		_main
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function ___lwtoft
  4009  00F8                     ___lwtoft:	
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4013  00F8  0878               	movf	___lwtoft@c,w
  4014  00F9  00F0               	movwf	___ftpack@arg
  4015  00FA  0879               	movf	___lwtoft@c+1,w
  4016  00FB  00F1               	movwf	___ftpack@arg+1
  4017  00FC  01F2               	clrf	___ftpack@arg+2
  4018  00FD  308E               	movlw	142
  4019  00FE  00FB               	movwf	??___lwtoft
  4020  00FF  087B               	movf	??___lwtoft,w
  4021  0100  00F3               	movwf	___ftpack@exp
  4022  0101  01F4               	clrf	___ftpack@sign
  4023  0102  220D               	fcall	___ftpack
  4024  0103  0870               	movf	?___ftpack,w
  4025  0104  00F8               	movwf	?___lwtoft
  4026  0105  0871               	movf	?___ftpack+1,w
  4027  0106  00F9               	movwf	?___lwtoft+1
  4028  0107  0872               	movf	?___ftpack+2,w
  4029  0108  00FA               	movwf	?___lwtoft+2
  4030  0109  0008               	return
  4031  010A                     __end_of___lwtoft:	
  4032                           
  4033                           	psect	text12
  4034  0271                     __ptext12:	
  4035 ;; *************** function ___fttol *****************
  4036 ;; Defined at:
  4037 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  f1              3   16[BANK0 ] float 
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;  lval            4   25[BANK0 ] unsigned long 
  4042 ;;  exp1            1   29[BANK0 ] unsigned char 
  4043 ;;  sign1           1   24[BANK0 ] unsigned char 
  4044 ;; Return value:  Size  Location     Type
  4045 ;;                  4   16[BANK0 ] long 
  4046 ;; Registers used:
  4047 ;;		wreg, status,2, status,0
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMMON   BANK0   BANK1
  4053 ;;      Params:         0       4       0
  4054 ;;      Locals:         0       6       0
  4055 ;;      Temps:          0       4       0
  4056 ;;      Totals:         0      14       0
  4057 ;;Total ram usage:       14 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; This function calls:
  4060 ;;		Nothing
  4061 ;; This function is called by:
  4062 ;;		_main
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function ___fttol
  4068  0271                     ___fttol:	
  4069                           
  4070                           ;incstack = 0
  4071                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4072  0271  0020               	movlb	0	; select bank0
  4073  0272  0830               	movf	___fttol@f1,w
  4074  0273  00B4               	movwf	??___fttol
  4075  0274  0831               	movf	___fttol@f1+1,w
  4076  0275  00B5               	movwf	??___fttol+1
  4077  0276  0832               	movf	___fttol@f1+2,w
  4078  0277  00B6               	movwf	??___fttol+2
  4079  0278  1003               	clrc
  4080  0279  0D35               	rlf	??___fttol+1,w
  4081  027A  0D36               	rlf	??___fttol+2,w
  4082  027B  00B7               	movwf	??___fttol+3
  4083  027C  0837               	movf	??___fttol+3,w
  4084  027D  00BD               	movwf	___fttol@exp1
  4085  027E  083D               	movf	___fttol@exp1,w
  4086  027F  1D03               	btfss	3,2
  4087  0280  2A8A               	goto	l2086
  4088  0281  3000               	movlw	0
  4089  0282  00B3               	movwf	?___fttol+3
  4090  0283  3000               	movlw	0
  4091  0284  00B2               	movwf	?___fttol+2
  4092  0285  3000               	movlw	0
  4093  0286  00B1               	movwf	?___fttol+1
  4094  0287  3000               	movlw	0
  4095  0288  00B0               	movwf	?___fttol
  4096  0289  0008               	return
  4097  028A                     l2086:	
  4098  028A  0830               	movf	___fttol@f1,w
  4099  028B  00B4               	movwf	??___fttol
  4100  028C  0831               	movf	___fttol@f1+1,w
  4101  028D  00B5               	movwf	??___fttol+1
  4102  028E  0832               	movf	___fttol@f1+2,w
  4103  028F  00B6               	movwf	??___fttol+2
  4104  0290  3017               	movlw	23
  4105  0291                     u2405:	
  4106  0291  36B6               	lsrf	??___fttol+2,f
  4107  0292  0CB5               	rrf	??___fttol+1,f
  4108  0293  0CB4               	rrf	??___fttol,f
  4109  0294  0B89               	decfsz	9,f
  4110  0295  2A91               	goto	u2405
  4111  0296  0834               	movf	??___fttol,w
  4112  0297  00B7               	movwf	??___fttol+3
  4113  0298  0837               	movf	??___fttol+3,w
  4114  0299  00B8               	movwf	___fttol@sign1
  4115  029A  17B1               	bsf	___fttol@f1+1,7
  4116  029B  30FF               	movlw	255
  4117  029C  05B0               	andwf	___fttol@f1,f
  4118  029D  30FF               	movlw	255
  4119  029E  05B1               	andwf	___fttol@f1+1,f
  4120  029F  3000               	movlw	0
  4121  02A0  05B2               	andwf	___fttol@f1+2,f
  4122  02A1  0830               	movf	___fttol@f1,w
  4123  02A2  00B9               	movwf	___fttol@lval
  4124  02A3  0831               	movf	___fttol@f1+1,w
  4125  02A4  00BA               	movwf	___fttol@lval+1
  4126  02A5  0832               	movf	___fttol@f1+2,w
  4127  02A6  00BB               	movwf	___fttol@lval+2
  4128  02A7  01BC               	clrf	___fttol@lval+3
  4129  02A8  308E               	movlw	142
  4130  02A9  02BD               	subwf	___fttol@exp1,f
  4131  02AA  1FBD               	btfss	___fttol@exp1,7
  4132  02AB  2AC8               	goto	l2106
  4133  02AC  083D               	movf	___fttol@exp1,w
  4134  02AD  3A80               	xorlw	128
  4135  02AE  3E8F               	addlw	143
  4136  02AF  1803               	skipnc
  4137  02B0  2ABA               	goto	l2104
  4138  02B1  3000               	movlw	0
  4139  02B2  00B3               	movwf	?___fttol+3
  4140  02B3  3000               	movlw	0
  4141  02B4  00B2               	movwf	?___fttol+2
  4142  02B5  3000               	movlw	0
  4143  02B6  00B1               	movwf	?___fttol+1
  4144  02B7  3000               	movlw	0
  4145  02B8  00B0               	movwf	?___fttol
  4146  02B9  0008               	return
  4147  02BA                     l2104:	
  4148  02BA  3001               	movlw	1
  4149  02BB                     u2435:	
  4150  02BB  36BC               	lsrf	___fttol@lval+3,f
  4151  02BC  0CBB               	rrf	___fttol@lval+2,f
  4152  02BD  0CBA               	rrf	___fttol@lval+1,f
  4153  02BE  0CB9               	rrf	___fttol@lval,f
  4154  02BF  0B89               	decfsz	9,f
  4155  02C0  2ABB               	goto	u2435
  4156  02C1  3001               	movlw	1
  4157  02C2  00B4               	movwf	??___fttol
  4158  02C3  0834               	movf	??___fttol,w
  4159  02C4  07BD               	addwf	___fttol@exp1,f
  4160  02C5  1903               	btfsc	3,2
  4161  02C6  2AE1               	goto	l2114
  4162  02C7  2ABA               	goto	l2104
  4163  02C8                     l2106:	
  4164  02C8  3018               	movlw	24
  4165  02C9  023D               	subwf	___fttol@exp1,w
  4166  02CA  1C03               	skipc
  4167  02CB  2ADE               	goto	l671
  4168  02CC  3000               	movlw	0
  4169  02CD  00B3               	movwf	?___fttol+3
  4170  02CE  3000               	movlw	0
  4171  02CF  00B2               	movwf	?___fttol+2
  4172  02D0  3000               	movlw	0
  4173  02D1  00B1               	movwf	?___fttol+1
  4174  02D2  3000               	movlw	0
  4175  02D3  00B0               	movwf	?___fttol
  4176  02D4  0008               	return
  4177  02D5                     l2112:	
  4178  02D5  3001               	movlw	1
  4179  02D6                     u2465:	
  4180  02D6  35B9               	lslf	___fttol@lval,f
  4181  02D7  0DBA               	rlf	___fttol@lval+1,f
  4182  02D8  0DBB               	rlf	___fttol@lval+2,f
  4183  02D9  0DBC               	rlf	___fttol@lval+3,f
  4184  02DA  0B89               	decfsz	9,f
  4185  02DB  2AD6               	goto	u2465
  4186  02DC  3001               	movlw	1
  4187  02DD  02BD               	subwf	___fttol@exp1,f
  4188  02DE                     l671:	
  4189  02DE  083D               	movf	___fttol@exp1,w
  4190  02DF  1D03               	btfss	3,2
  4191  02E0  2AD5               	goto	l2112
  4192  02E1                     l2114:	
  4193  02E1  0838               	movf	___fttol@sign1,w
  4194  02E2  1903               	btfsc	3,2
  4195  02E3  2AEF               	goto	l2118
  4196  02E4  09B9               	comf	___fttol@lval,f
  4197  02E5  09BA               	comf	___fttol@lval+1,f
  4198  02E6  09BB               	comf	___fttol@lval+2,f
  4199  02E7  09BC               	comf	___fttol@lval+3,f
  4200  02E8  0AB9               	incf	___fttol@lval,f
  4201  02E9  1903               	skipnz
  4202  02EA  0ABA               	incf	___fttol@lval+1,f
  4203  02EB  1903               	skipnz
  4204  02EC  0ABB               	incf	___fttol@lval+2,f
  4205  02ED  1903               	skipnz
  4206  02EE  0ABC               	incf	___fttol@lval+3,f
  4207  02EF                     l2118:	
  4208  02EF  083C               	movf	___fttol@lval+3,w
  4209  02F0  00B3               	movwf	?___fttol+3
  4210  02F1  083B               	movf	___fttol@lval+2,w
  4211  02F2  00B2               	movwf	?___fttol+2
  4212  02F3  083A               	movf	___fttol@lval+1,w
  4213  02F4  00B1               	movwf	?___fttol+1
  4214  02F5  0839               	movf	___fttol@lval,w
  4215  02F6  00B0               	movwf	?___fttol
  4216  02F7  0008               	return
  4217  02F8                     __end_of___fttol:	
  4218                           
  4219                           	psect	text13
  4220  02F8                     __ptext13:	
  4221 ;; *************** function ___ftmul *****************
  4222 ;; Defined at:
  4223 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  f1              3    0[BANK0 ] float 
  4226 ;;  f2              3    3[BANK0 ] float 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  4229 ;;  sign            1   15[BANK0 ] unsigned char 
  4230 ;;  cntr            1   14[BANK0 ] unsigned char 
  4231 ;;  exp             1   10[BANK0 ] unsigned char 
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  3    0[BANK0 ] float 
  4234 ;; Registers used:
  4235 ;;		wreg, status,2, status,0, pclath, cstack
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMMON   BANK0   BANK1
  4241 ;;      Params:         0       6       0
  4242 ;;      Locals:         0       6       0
  4243 ;;      Temps:          0       4       0
  4244 ;;      Totals:         0      16       0
  4245 ;;Total ram usage:       16 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:    1
  4248 ;; This function calls:
  4249 ;;		___ftpack
  4250 ;; This function is called by:
  4251 ;;		_main
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           
  4256                           ;psect for function ___ftmul
  4257  02F8                     ___ftmul:	
  4258                           
  4259                           ;incstack = 0
  4260                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4261  02F8  0020               	movlb	0	; select bank0
  4262  02F9  0820               	movf	___ftmul@f1,w
  4263  02FA  00A6               	movwf	??___ftmul
  4264  02FB  0821               	movf	___ftmul@f1+1,w
  4265  02FC  00A7               	movwf	??___ftmul+1
  4266  02FD  0822               	movf	___ftmul@f1+2,w
  4267  02FE  00A8               	movwf	??___ftmul+2
  4268  02FF  1003               	clrc
  4269  0300  0D27               	rlf	??___ftmul+1,w
  4270  0301  0D28               	rlf	??___ftmul+2,w
  4271  0302  00A9               	movwf	??___ftmul+3
  4272  0303  0829               	movf	??___ftmul+3,w
  4273  0304  00AA               	movwf	___ftmul@exp
  4274  0305  082A               	movf	___ftmul@exp,w
  4275  0306  1D03               	btfss	3,2
  4276  0307  2B0F               	goto	l2036
  4277  0308  3000               	movlw	0
  4278  0309  00A0               	movwf	?___ftmul
  4279  030A  3000               	movlw	0
  4280  030B  00A1               	movwf	?___ftmul+1
  4281  030C  3000               	movlw	0
  4282  030D  00A2               	movwf	?___ftmul+2
  4283  030E  0008               	return
  4284  030F                     l2036:	
  4285  030F  0823               	movf	___ftmul@f2,w
  4286  0310  00A6               	movwf	??___ftmul
  4287  0311  0824               	movf	___ftmul@f2+1,w
  4288  0312  00A7               	movwf	??___ftmul+1
  4289  0313  0825               	movf	___ftmul@f2+2,w
  4290  0314  00A8               	movwf	??___ftmul+2
  4291  0315  1003               	clrc
  4292  0316  0D27               	rlf	??___ftmul+1,w
  4293  0317  0D28               	rlf	??___ftmul+2,w
  4294  0318  00A9               	movwf	??___ftmul+3
  4295  0319  0829               	movf	??___ftmul+3,w
  4296  031A  00AF               	movwf	___ftmul@sign
  4297  031B  082F               	movf	___ftmul@sign,w
  4298  031C  1D03               	btfss	3,2
  4299  031D  2B25               	goto	l2042
  4300  031E  3000               	movlw	0
  4301  031F  00A0               	movwf	?___ftmul
  4302  0320  3000               	movlw	0
  4303  0321  00A1               	movwf	?___ftmul+1
  4304  0322  3000               	movlw	0
  4305  0323  00A2               	movwf	?___ftmul+2
  4306  0324  0008               	return
  4307  0325                     l2042:	
  4308  0325  082F               	movf	___ftmul@sign,w
  4309  0326  3E7B               	addlw	123
  4310  0327  00A6               	movwf	??___ftmul
  4311  0328  0826               	movf	??___ftmul,w
  4312  0329  07AA               	addwf	___ftmul@exp,f
  4313  032A  0820               	movf	___ftmul@f1,w
  4314  032B  00A6               	movwf	??___ftmul
  4315  032C  0821               	movf	___ftmul@f1+1,w
  4316  032D  00A7               	movwf	??___ftmul+1
  4317  032E  0822               	movf	___ftmul@f1+2,w
  4318  032F  00A8               	movwf	??___ftmul+2
  4319  0330  3010               	movlw	16
  4320  0331                     u2295:	
  4321  0331  36A8               	lsrf	??___ftmul+2,f
  4322  0332  0CA7               	rrf	??___ftmul+1,f
  4323  0333  0CA6               	rrf	??___ftmul,f
  4324  0334  0B89               	decfsz	9,f
  4325  0335  2B31               	goto	u2295
  4326  0336  0826               	movf	??___ftmul,w
  4327  0337  00A9               	movwf	??___ftmul+3
  4328  0338  0829               	movf	??___ftmul+3,w
  4329  0339  00AF               	movwf	___ftmul@sign
  4330  033A  0823               	movf	___ftmul@f2,w
  4331  033B  00A6               	movwf	??___ftmul
  4332  033C  0824               	movf	___ftmul@f2+1,w
  4333  033D  00A7               	movwf	??___ftmul+1
  4334  033E  0825               	movf	___ftmul@f2+2,w
  4335  033F  00A8               	movwf	??___ftmul+2
  4336  0340  3010               	movlw	16
  4337  0341                     u2305:	
  4338  0341  36A8               	lsrf	??___ftmul+2,f
  4339  0342  0CA7               	rrf	??___ftmul+1,f
  4340  0343  0CA6               	rrf	??___ftmul,f
  4341  0344  0B89               	decfsz	9,f
  4342  0345  2B41               	goto	u2305
  4343  0346  0826               	movf	??___ftmul,w
  4344  0347  00A9               	movwf	??___ftmul+3
  4345  0348  0829               	movf	??___ftmul+3,w
  4346  0349  06AF               	xorwf	___ftmul@sign,f
  4347  034A  3080               	movlw	128
  4348  034B  00A6               	movwf	??___ftmul
  4349  034C  0826               	movf	??___ftmul,w
  4350  034D  05AF               	andwf	___ftmul@sign,f
  4351  034E  17A1               	bsf	___ftmul@f1+1,7
  4352  034F  17A4               	bsf	___ftmul@f2+1,7
  4353  0350  30FF               	movlw	255
  4354  0351  05A3               	andwf	___ftmul@f2,f
  4355  0352  30FF               	movlw	255
  4356  0353  05A4               	andwf	___ftmul@f2+1,f
  4357  0354  3000               	movlw	0
  4358  0355  05A5               	andwf	___ftmul@f2+2,f
  4359  0356  3000               	movlw	0
  4360  0357  00AB               	movwf	___ftmul@f3_as_product
  4361  0358  3000               	movlw	0
  4362  0359  00AC               	movwf	___ftmul@f3_as_product+1
  4363  035A  3000               	movlw	0
  4364  035B  00AD               	movwf	___ftmul@f3_as_product+2
  4365  035C  3007               	movlw	7
  4366  035D  00A6               	movwf	??___ftmul
  4367  035E  0826               	movf	??___ftmul,w
  4368  035F  00AE               	movwf	___ftmul@cntr
  4369  0360                     l2054:	
  4370  0360  1C20               	btfss	___ftmul@f1,0
  4371  0361  2B68               	goto	l2058
  4372  0362  0823               	movf	___ftmul@f2,w
  4373  0363  07AB               	addwf	___ftmul@f3_as_product,f
  4374  0364  0824               	movf	___ftmul@f2+1,w
  4375  0365  3DAC               	addwfc	___ftmul@f3_as_product+1,f
  4376  0366  0825               	movf	___ftmul@f2+2,w
  4377  0367  3DAD               	addwfc	___ftmul@f3_as_product+2,f
  4378  0368                     l2058:	
  4379  0368  3001               	movlw	1
  4380  0369                     u2325:	
  4381  0369  36A2               	lsrf	___ftmul@f1+2,f
  4382  036A  0CA1               	rrf	___ftmul@f1+1,f
  4383  036B  0CA0               	rrf	___ftmul@f1,f
  4384  036C  0B89               	decfsz	9,f
  4385  036D  2B69               	goto	u2325
  4386  036E  3001               	movlw	1
  4387  036F                     u2335:	
  4388  036F  35A3               	lslf	___ftmul@f2,f
  4389  0370  0DA4               	rlf	___ftmul@f2+1,f
  4390  0371  0DA5               	rlf	___ftmul@f2+2,f
  4391  0372  0B89               	decfsz	9,f
  4392  0373  2B6F               	goto	u2335
  4393  0374  3001               	movlw	1
  4394  0375  02AE               	subwf	___ftmul@cntr,f
  4395  0376  1D03               	btfss	3,2
  4396  0377  2B60               	goto	l2054
  4397  0378  3009               	movlw	9
  4398  0379  00A6               	movwf	??___ftmul
  4399  037A  0826               	movf	??___ftmul,w
  4400  037B  00AE               	movwf	___ftmul@cntr
  4401  037C                     l2066:	
  4402  037C  1C20               	btfss	___ftmul@f1,0
  4403  037D  2B84               	goto	l2070
  4404  037E  0823               	movf	___ftmul@f2,w
  4405  037F  07AB               	addwf	___ftmul@f3_as_product,f
  4406  0380  0824               	movf	___ftmul@f2+1,w
  4407  0381  3DAC               	addwfc	___ftmul@f3_as_product+1,f
  4408  0382  0825               	movf	___ftmul@f2+2,w
  4409  0383  3DAD               	addwfc	___ftmul@f3_as_product+2,f
  4410  0384                     l2070:	
  4411  0384  3001               	movlw	1
  4412  0385                     u2365:	
  4413  0385  36A2               	lsrf	___ftmul@f1+2,f
  4414  0386  0CA1               	rrf	___ftmul@f1+1,f
  4415  0387  0CA0               	rrf	___ftmul@f1,f
  4416  0388  0B89               	decfsz	9,f
  4417  0389  2B85               	goto	u2365
  4418  038A  3001               	movlw	1
  4419  038B                     u2375:	
  4420  038B  36AD               	lsrf	___ftmul@f3_as_product+2,f
  4421  038C  0CAC               	rrf	___ftmul@f3_as_product+1,f
  4422  038D  0CAB               	rrf	___ftmul@f3_as_product,f
  4423  038E  0B89               	decfsz	9,f
  4424  038F  2B8B               	goto	u2375
  4425  0390  3001               	movlw	1
  4426  0391  02AE               	subwf	___ftmul@cntr,f
  4427  0392  1D03               	btfss	3,2
  4428  0393  2B7C               	goto	l2066
  4429  0394  082B               	movf	___ftmul@f3_as_product,w
  4430  0395  00F0               	movwf	___ftpack@arg
  4431  0396  082C               	movf	___ftmul@f3_as_product+1,w
  4432  0397  00F1               	movwf	___ftpack@arg+1
  4433  0398  082D               	movf	___ftmul@f3_as_product+2,w
  4434  0399  00F2               	movwf	___ftpack@arg+2
  4435  039A  082A               	movf	___ftmul@exp,w
  4436  039B  00A6               	movwf	??___ftmul
  4437  039C  0826               	movf	??___ftmul,w
  4438  039D  00F3               	movwf	___ftpack@exp
  4439  039E  082F               	movf	___ftmul@sign,w
  4440  039F  00A7               	movwf	??___ftmul+1
  4441  03A0  0827               	movf	??___ftmul+1,w
  4442  03A1  00F4               	movwf	___ftpack@sign
  4443  03A2  220D               	fcall	___ftpack
  4444  03A3  0870               	movf	?___ftpack,w
  4445  03A4  0020               	movlb	0	; select bank0
  4446  03A5  00A0               	movwf	?___ftmul
  4447  03A6  0871               	movf	?___ftpack+1,w
  4448  03A7  00A1               	movwf	?___ftmul+1
  4449  03A8  0872               	movf	?___ftpack+2,w
  4450  03A9  00A2               	movwf	?___ftmul+2
  4451  03AA  0008               	return
  4452  03AB                     __end_of___ftmul:	
  4453                           
  4454                           	psect	text14
  4455  020D                     __ptext14:	
  4456 ;; *************** function ___ftpack *****************
  4457 ;; Defined at:
  4458 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  arg             3    0[COMMON] unsigned um
  4461 ;;  exp             1    3[COMMON] unsigned char 
  4462 ;;  sign            1    4[COMMON] unsigned char 
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  3    0[COMMON] float 
  4467 ;; Registers used:
  4468 ;;		wreg, status,2, status,0
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMMON   BANK0   BANK1
  4474 ;;      Params:         5       0       0
  4475 ;;      Locals:         0       0       0
  4476 ;;      Temps:          3       0       0
  4477 ;;      Totals:         8       0       0
  4478 ;;Total ram usage:        8 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; This function calls:
  4481 ;;		Nothing
  4482 ;; This function is called by:
  4483 ;;		___ftmul
  4484 ;;		___lwtoft
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           
  4489                           ;psect for function ___ftpack
  4490  020D                     ___ftpack:	
  4491                           
  4492                           ;incstack = 0
  4493                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4494  020D  0873               	movf	___ftpack@exp,w
  4495  020E  1903               	btfsc	3,2
  4496  020F  2A15               	goto	l1974
  4497  0210  0872               	movf	___ftpack@arg+2,w
  4498  0211  0471               	iorwf	___ftpack@arg+1,w
  4499  0212  0470               	iorwf	___ftpack@arg,w
  4500  0213  1D03               	skipz
  4501  0214  2A26               	goto	l1980
  4502  0215                     l1974:	
  4503  0215  3000               	movlw	0
  4504  0216  00F0               	movwf	?___ftpack
  4505  0217  3000               	movlw	0
  4506  0218  00F1               	movwf	?___ftpack+1
  4507  0219  3000               	movlw	0
  4508  021A  00F2               	movwf	?___ftpack+2
  4509  021B  0008               	return
  4510  021C                     l1978:	
  4511  021C  3001               	movlw	1
  4512  021D  00F5               	movwf	??___ftpack
  4513  021E  0875               	movf	??___ftpack,w
  4514  021F  07F3               	addwf	___ftpack@exp,f
  4515  0220  3001               	movlw	1
  4516  0221                     u2135:	
  4517  0221  36F2               	lsrf	___ftpack@arg+2,f
  4518  0222  0CF1               	rrf	___ftpack@arg+1,f
  4519  0223  0CF0               	rrf	___ftpack@arg,f
  4520  0224  0B89               	decfsz	9,f
  4521  0225  2A21               	goto	u2135
  4522  0226                     l1980:	
  4523  0226  30FE               	movlw	254
  4524  0227  0572               	andwf	___ftpack@arg+2,w
  4525  0228  1903               	btfsc	3,2
  4526  0229  2A3F               	goto	l580
  4527  022A  2A1C               	goto	l1978
  4528  022B                     l1982:	
  4529  022B  3001               	movlw	1
  4530  022C  00F5               	movwf	??___ftpack
  4531  022D  0875               	movf	??___ftpack,w
  4532  022E  07F3               	addwf	___ftpack@exp,f
  4533  022F  3001               	movlw	1
  4534  0230  07F0               	addwf	___ftpack@arg,f
  4535  0231  3000               	movlw	0
  4536  0232  1803               	skipnc
  4537  0233  3001               	movlw	1
  4538  0234  07F1               	addwf	___ftpack@arg+1,f
  4539  0235  3000               	movlw	0
  4540  0236  1803               	skipnc
  4541  0237  3001               	movlw	1
  4542  0238  07F2               	addwf	___ftpack@arg+2,f
  4543  0239  3001               	movlw	1
  4544  023A                     u2155:	
  4545  023A  36F2               	lsrf	___ftpack@arg+2,f
  4546  023B  0CF1               	rrf	___ftpack@arg+1,f
  4547  023C  0CF0               	rrf	___ftpack@arg,f
  4548  023D  0B89               	decfsz	9,f
  4549  023E  2A3A               	goto	u2155
  4550  023F                     l580:	
  4551  023F  30FF               	movlw	255
  4552  0240  0572               	andwf	___ftpack@arg+2,w
  4553  0241  1903               	btfsc	3,2
  4554  0242  2A4C               	goto	l1990
  4555  0243  2A2B               	goto	l1982
  4556  0244                     l1988:	
  4557  0244  3001               	movlw	1
  4558  0245  02F3               	subwf	___ftpack@exp,f
  4559  0246  3001               	movlw	1
  4560  0247                     u2175:	
  4561  0247  35F0               	lslf	___ftpack@arg,f
  4562  0248  0DF1               	rlf	___ftpack@arg+1,f
  4563  0249  0DF2               	rlf	___ftpack@arg+2,f
  4564  024A  0B89               	decfsz	9,f
  4565  024B  2A47               	goto	u2175
  4566  024C                     l1990:	
  4567  024C  1BF1               	btfsc	___ftpack@arg+1,7
  4568  024D  2A52               	goto	l587
  4569  024E  3002               	movlw	2
  4570  024F  0273               	subwf	___ftpack@exp,w
  4571  0250  1803               	skipnc
  4572  0251  2A44               	goto	l1988
  4573  0252                     l587:	
  4574  0252  1873               	btfsc	___ftpack@exp,0
  4575  0253  2A5A               	goto	l588
  4576  0254  30FF               	movlw	255
  4577  0255  05F0               	andwf	___ftpack@arg,f
  4578  0256  307F               	movlw	127
  4579  0257  05F1               	andwf	___ftpack@arg+1,f
  4580  0258  30FF               	movlw	255
  4581  0259  05F2               	andwf	___ftpack@arg+2,f
  4582  025A                     l588:	
  4583  025A  1003               	clrc
  4584  025B  0CF3               	rrf	___ftpack@exp,f
  4585  025C  0873               	movf	___ftpack@exp,w
  4586  025D  00F5               	movwf	??___ftpack
  4587  025E  01F6               	clrf	??___ftpack+1
  4588  025F  01F7               	clrf	??___ftpack+2
  4589  0260  3010               	movlw	16
  4590  0261                     u2215:	
  4591  0261  35F5               	lslf	??___ftpack,f
  4592  0262  0DF6               	rlf	??___ftpack+1,f
  4593  0263  0DF7               	rlf	??___ftpack+2,f
  4594  0264  0B89               	decfsz	9,f
  4595  0265  2A61               	goto	u2215
  4596  0266  0875               	movf	??___ftpack,w
  4597  0267  04F0               	iorwf	___ftpack@arg,f
  4598  0268  0876               	movf	??___ftpack+1,w
  4599  0269  04F1               	iorwf	___ftpack@arg+1,f
  4600  026A  0877               	movf	??___ftpack+2,w
  4601  026B  04F2               	iorwf	___ftpack@arg+2,f
  4602  026C  0874               	movf	___ftpack@sign,w
  4603  026D  1903               	btfsc	3,2
  4604  026E  0008               	return
  4605  026F  17F2               	bsf	___ftpack@arg+2,7
  4606  0270  0008               	return
  4607  0271                     __end_of___ftpack:	
  4608                           
  4609                           	psect	text15
  4610  003C                     __ptext15:	
  4611 ;; *************** function _SYSTEM_Initialize *****************
  4612 ;; Defined at:
  4613 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0, pclath, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1
  4627 ;;      Params:         0       0       0
  4628 ;;      Locals:         0       0       0
  4629 ;;      Temps:          0       0       0
  4630 ;;      Totals:         0       0       0
  4631 ;;Total ram usage:        0 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    2
  4634 ;; This function calls:
  4635 ;;		_ADC_Initialize
  4636 ;;		_EPWM1_Initialize
  4637 ;;		_EUSART_Initialize
  4638 ;;		_OSCILLATOR_Initialize
  4639 ;;		_PIN_MANAGER_Initialize
  4640 ;;		_TMR2_Initialize
  4641 ;; This function is called by:
  4642 ;;		_main
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           
  4647                           ;psect for function _SYSTEM_Initialize
  4648  003C                     _SYSTEM_Initialize:	
  4649                           
  4650                           ;mcc.c: 72: OSCILLATOR_Initialize();
  4651                           
  4652                           ;incstack = 0
  4653                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4654  003C  2036               	fcall	_OSCILLATOR_Initialize
  4655                           
  4656                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  4657  003D  20A4               	fcall	_PIN_MANAGER_Initialize
  4658                           
  4659                           ;mcc.c: 74: TMR2_Initialize();
  4660  003E  204B               	fcall	_TMR2_Initialize
  4661                           
  4662                           ;mcc.c: 75: EPWM1_Initialize();
  4663  003F  2065               	fcall	_EPWM1_Initialize
  4664                           
  4665                           ;mcc.c: 76: ADC_Initialize();
  4666  0040  2043               	fcall	_ADC_Initialize
  4667                           
  4668                           ;mcc.c: 77: EUSART_Initialize();
  4669  0041  2070               	fcall	_EUSART_Initialize
  4670  0042  0008               	return
  4671  0043                     __end_of_SYSTEM_Initialize:	
  4672                           
  4673                           	psect	text16
  4674  004B                     __ptext16:	
  4675 ;; *************** function _TMR2_Initialize *****************
  4676 ;; Defined at:
  4677 ;;		line 58 in file "mcc_generated_files/tmr2.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;		None
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;		None
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  1    wreg      void 
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0, pclath, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1
  4691 ;;      Params:         0       0       0
  4692 ;;      Locals:         0       0       0
  4693 ;;      Temps:          0       0       0
  4694 ;;      Totals:         0       0       0
  4695 ;;Total ram usage:        0 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    1
  4698 ;; This function calls:
  4699 ;;		_TMR2_StartTimer
  4700 ;; This function is called by:
  4701 ;;		_SYSTEM_Initialize
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           
  4706                           ;psect for function _TMR2_Initialize
  4707  004B                     _TMR2_Initialize:	
  4708                           
  4709                           ;tmr2.c: 63: T2CON = 0x00;
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4713  004B  0020               	movlb	0	; select bank0
  4714  004C  019C               	clrf	28	;volatile
  4715                           
  4716                           ;tmr2.c: 66: PR2 = 0x1B;
  4717  004D  301B               	movlw	27
  4718  004E  009B               	movwf	27	;volatile
  4719                           
  4720                           ;tmr2.c: 69: TMR2 = 0x00;
  4721  004F  019A               	clrf	26	;volatile
  4722                           
  4723                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  4724  0050  1091               	bcf	17,1	;volatile
  4725                           
  4726                           ;tmr2.c: 75: TMR2_StartTimer();
  4727  0051  2033               	fcall	_TMR2_StartTimer
  4728  0052  0008               	return
  4729  0053                     __end_of_TMR2_Initialize:	
  4730                           
  4731                           	psect	text17
  4732  0033                     __ptext17:	
  4733 ;; *************** function _TMR2_StartTimer *****************
  4734 ;; Defined at:
  4735 ;;		line 78 in file "mcc_generated_files/tmr2.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		None
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMMON   BANK0   BANK1
  4749 ;;      Params:         0       0       0
  4750 ;;      Locals:         0       0       0
  4751 ;;      Temps:          0       0       0
  4752 ;;      Totals:         0       0       0
  4753 ;;Total ram usage:        0 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; This function calls:
  4756 ;;		Nothing
  4757 ;; This function is called by:
  4758 ;;		_TMR2_Initialize
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           
  4763                           ;psect for function _TMR2_StartTimer
  4764  0033                     _TMR2_StartTimer:	
  4765                           
  4766                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
  4767                           
  4768                           ;incstack = 0
  4769                           ; Regs used in _TMR2_StartTimer: []
  4770  0033  0020               	movlb	0	; select bank0
  4771  0034  151C               	bsf	28,2	;volatile
  4772  0035  0008               	return
  4773  0036                     __end_of_TMR2_StartTimer:	
  4774                           
  4775                           	psect	text18
  4776  00A4                     __ptext18:	
  4777 ;; *************** function _PIN_MANAGER_Initialize *****************
  4778 ;; Defined at:
  4779 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;		None
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;		None
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  1    wreg      void 
  4786 ;; Registers used:
  4787 ;;		wreg, status,2
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMMON   BANK0   BANK1
  4793 ;;      Params:         0       0       0
  4794 ;;      Locals:         0       0       0
  4795 ;;      Temps:          0       0       0
  4796 ;;      Totals:         0       0       0
  4797 ;;Total ram usage:        0 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; This function calls:
  4800 ;;		Nothing
  4801 ;; This function is called by:
  4802 ;;		_SYSTEM_Initialize
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           
  4807                           ;psect for function _PIN_MANAGER_Initialize
  4808  00A4                     _PIN_MANAGER_Initialize:	
  4809                           
  4810                           ;pin_manager.c: 52: LATA = 0x00;
  4811                           
  4812                           ;incstack = 0
  4813                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4814  00A4  0022               	movlb	2	; select bank2
  4815  00A5  018C               	clrf	12	;volatile
  4816                           
  4817                           ;pin_manager.c: 53: TRISA = 0x0F;
  4818  00A6  300F               	movlw	15
  4819  00A7  0021               	movlb	1	; select bank1
  4820  00A8  008C               	movwf	12	;volatile
  4821                           
  4822                           ;pin_manager.c: 54: ANSELA = 0x04;
  4823  00A9  3004               	movlw	4
  4824  00AA  0023               	movlb	3	; select bank3
  4825  00AB  008C               	movwf	12	;volatile
  4826                           
  4827                           ;pin_manager.c: 55: WPUA = 0x00;
  4828  00AC  0024               	movlb	4	; select bank4
  4829  00AD  018C               	clrf	12	;volatile
  4830                           
  4831                           ;pin_manager.c: 57: OPTION_REGbits.nWPUEN = 0x01;
  4832  00AE  0021               	movlb	1	; select bank1
  4833  00AF  1795               	bsf	21,7	;volatile
  4834                           
  4835                           ;pin_manager.c: 59: APFCON = 0x03;
  4836  00B0  3003               	movlw	3
  4837  00B1  0022               	movlb	2	; select bank2
  4838  00B2  009D               	movwf	29	;volatile
  4839  00B3  0008               	return
  4840  00B4                     __end_of_PIN_MANAGER_Initialize:	
  4841                           
  4842                           	psect	text19
  4843  0036                     __ptext19:	
  4844 ;; *************** function _OSCILLATOR_Initialize *****************
  4845 ;; Defined at:
  4846 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  1    wreg      void 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMMON   BANK0   BANK1
  4860 ;;      Params:         0       0       0
  4861 ;;      Locals:         0       0       0
  4862 ;;      Temps:          0       0       0
  4863 ;;      Totals:         0       0       0
  4864 ;;Total ram usage:        0 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		_SYSTEM_Initialize
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           
  4874                           ;psect for function _OSCILLATOR_Initialize
  4875  0036                     _OSCILLATOR_Initialize:	
  4876                           
  4877                           ;mcc.c: 83: OSCCON = 0x7A;
  4878                           
  4879                           ;incstack = 0
  4880                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4881  0036  307A               	movlw	122
  4882  0037  0021               	movlb	1	; select bank1
  4883  0038  0099               	movwf	25	;volatile
  4884                           
  4885                           ;mcc.c: 85: OSCSTAT = 0x00;
  4886  0039  019A               	clrf	26	;volatile
  4887                           
  4888                           ;mcc.c: 87: OSCTUNE = 0x00;
  4889  003A  0198               	clrf	24	;volatile
  4890  003B  0008               	return
  4891  003C                     __end_of_OSCILLATOR_Initialize:	
  4892                           
  4893                           	psect	text20
  4894  0070                     __ptext20:	
  4895 ;; *************** function _EUSART_Initialize *****************
  4896 ;; Defined at:
  4897 ;;		line 56 in file "mcc_generated_files/eusart.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;		None
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  1    wreg      void 
  4904 ;; Registers used:
  4905 ;;		wreg
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMMON   BANK0   BANK1
  4911 ;;      Params:         0       0       0
  4912 ;;      Locals:         0       0       0
  4913 ;;      Temps:          0       0       0
  4914 ;;      Totals:         0       0       0
  4915 ;;Total ram usage:        0 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; This function calls:
  4918 ;;		Nothing
  4919 ;; This function is called by:
  4920 ;;		_SYSTEM_Initialize
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           
  4925                           ;psect for function _EUSART_Initialize
  4926  0070                     _EUSART_Initialize:	
  4927                           
  4928                           ;eusart.c: 61: BAUDCON = 0x4A;
  4929                           
  4930                           ;incstack = 0
  4931                           ; Regs used in _EUSART_Initialize: [wreg]
  4932  0070  304A               	movlw	74
  4933  0071  0023               	movlb	3	; select bank3
  4934  0072  009F               	movwf	31	;volatile
  4935                           
  4936                           ;eusart.c: 64: RCSTA = 0x80;
  4937  0073  3080               	movlw	128
  4938  0074  009D               	movwf	29	;volatile
  4939                           
  4940                           ;eusart.c: 67: TXSTA = 0x26;
  4941  0075  3026               	movlw	38
  4942  0076  009E               	movwf	30	;volatile
  4943                           
  4944                           ;eusart.c: 70: SPBRGL = 0xA0;
  4945  0077  30A0               	movlw	160
  4946  0078  009B               	movwf	27	;volatile
  4947                           
  4948                           ;eusart.c: 73: SPBRGH = 0x01;
  4949  0079  3001               	movlw	1
  4950  007A  009C               	movwf	28	;volatile
  4951  007B  0008               	return
  4952  007C                     __end_of_EUSART_Initialize:	
  4953                           
  4954                           	psect	text21
  4955  0065                     __ptext21:	
  4956 ;; *************** function _EPWM1_Initialize *****************
  4957 ;; Defined at:
  4958 ;;		line 64 in file "mcc_generated_files/epwm1.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;		None
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;		None
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  1    wreg      void 
  4965 ;; Registers used:
  4966 ;;		wreg, status,2
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMMON   BANK0   BANK1
  4972 ;;      Params:         0       0       0
  4973 ;;      Locals:         0       0       0
  4974 ;;      Temps:          0       0       0
  4975 ;;      Totals:         0       0       0
  4976 ;;Total ram usage:        0 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; This function calls:
  4979 ;;		Nothing
  4980 ;; This function is called by:
  4981 ;;		_SYSTEM_Initialize
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           
  4986                           ;psect for function _EPWM1_Initialize
  4987  0065                     _EPWM1_Initialize:	
  4988                           
  4989                           ;epwm1.c: 69: CCP1CON = 0xBC;
  4990                           
  4991                           ;incstack = 0
  4992                           ; Regs used in _EPWM1_Initialize: [wreg+status,2]
  4993  0065  30BC               	movlw	188
  4994  0066  0025               	movlb	5	; select bank5
  4995  0067  0093               	movwf	19	;volatile
  4996                           
  4997                           ;epwm1.c: 72: ECCP1AS = 0x00;
  4998  0068  0195               	clrf	21	;volatile
  4999                           
  5000                           ;epwm1.c: 75: PWM1CON = 0x80;
  5001  0069  3080               	movlw	128
  5002  006A  0094               	movwf	20	;volatile
  5003                           
  5004                           ;epwm1.c: 78: PSTR1CON = 0x00;
  5005  006B  0196               	clrf	22	;volatile
  5006                           
  5007                           ;epwm1.c: 81: CCPR1L = 0x0D;
  5008  006C  300D               	movlw	13
  5009  006D  0091               	movwf	17	;volatile
  5010                           
  5011                           ;epwm1.c: 84: CCPR1H = 0x00;
  5012  006E  0192               	clrf	18	;volatile
  5013  006F  0008               	return
  5014  0070                     __end_of_EPWM1_Initialize:	
  5015                           
  5016                           	psect	text22
  5017  0043                     __ptext22:	
  5018 ;; *************** function _ADC_Initialize *****************
  5019 ;; Defined at:
  5020 ;;		line 59 in file "mcc_generated_files/adc.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;		None
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;		None
  5025 ;; Return value:  Size  Location     Type
  5026 ;;                  1    wreg      void 
  5027 ;; Registers used:
  5028 ;;		wreg, status,2
  5029 ;; Tracked objects:
  5030 ;;		On entry : 0/0
  5031 ;;		On exit  : 0/0
  5032 ;;		Unchanged: 0/0
  5033 ;; Data sizes:     COMMON   BANK0   BANK1
  5034 ;;      Params:         0       0       0
  5035 ;;      Locals:         0       0       0
  5036 ;;      Temps:          0       0       0
  5037 ;;      Totals:         0       0       0
  5038 ;;Total ram usage:        0 bytes
  5039 ;; Hardware stack levels used:    1
  5040 ;; This function calls:
  5041 ;;		Nothing
  5042 ;; This function is called by:
  5043 ;;		_SYSTEM_Initialize
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           
  5048                           ;psect for function _ADC_Initialize
  5049  0043                     _ADC_Initialize:	
  5050                           
  5051                           ;adc.c: 64: ADCON0 = 0x01;
  5052                           
  5053                           ;incstack = 0
  5054                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  5055  0043  3001               	movlw	1
  5056  0044  0021               	movlb	1	; select bank1
  5057  0045  009D               	movwf	29	;volatile
  5058                           
  5059                           ;adc.c: 67: ADCON1 = 0x90;
  5060  0046  3090               	movlw	144
  5061  0047  009E               	movwf	30	;volatile
  5062                           
  5063                           ;adc.c: 70: ADRESL = 0x00;
  5064  0048  019B               	clrf	27	;volatile
  5065                           
  5066                           ;adc.c: 73: ADRESH = 0x00;
  5067  0049  019C               	clrf	28	;volatile
  5068  004A  0008               	return
  5069  004B                     __end_of_ADC_Initialize:	
  5070                           
  5071                           	psect	text23
  5072  010A                     __ptext23:	
  5073 ;; *************** function _ADC_GetConversion *****************
  5074 ;; Defined at:
  5075 ;;		line 102 in file "mcc_generated_files/adc.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  channel         1    wreg     enum E2216
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  channel         1    3[COMMON] enum E2216
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  2    0[COMMON] unsigned int 
  5082 ;; Registers used:
  5083 ;;		wreg, status,2, status,0
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMMON   BANK0   BANK1
  5089 ;;      Params:         2       0       0
  5090 ;;      Locals:         1       0       0
  5091 ;;      Temps:          1       0       0
  5092 ;;      Totals:         4       0       0
  5093 ;;Total ram usage:        4 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; This function calls:
  5096 ;;		Nothing
  5097 ;; This function is called by:
  5098 ;;		_main
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           
  5103                           ;psect for function _ADC_GetConversion
  5104  010A                     _ADC_GetConversion:	
  5105                           
  5106                           ;incstack = 0
  5107                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  5108                           ;ADC_GetConversion@channel stored from wreg
  5109  010A  00F3               	movwf	ADC_GetConversion@channel
  5110                           
  5111                           ;adc.c: 105: ADCON0bits.CHS = channel;
  5112  010B  0873               	movf	ADC_GetConversion@channel,w
  5113  010C  00F2               	movwf	??_ADC_GetConversion
  5114  010D  0DF2               	rlf	??_ADC_GetConversion,f
  5115  010E  0DF2               	rlf	??_ADC_GetConversion,f
  5116  010F  0021               	movlb	1	; select bank1
  5117  0110  081D               	movf	29,w	;volatile
  5118  0111  0672               	xorwf	??_ADC_GetConversion,w
  5119  0112  3983               	andlw	-125
  5120  0113  0672               	xorwf	??_ADC_GetConversion,w
  5121  0114  009D               	movwf	29	;volatile
  5122                           
  5123                           ;adc.c: 108: ADCON0bits.ADON = 1;
  5124  0115  141D               	bsf	29,0	;volatile
  5125                           
  5126                           ;adc.c: 112: ADCON0bits.GO_nDONE = 1;
  5127  0116  149D               	bsf	29,1	;volatile
  5128  0117                     l132:	
  5129                           ;adc.c: 116: {
  5130                           
  5131                           ;adc.c: 115: while (ADCON0bits.GO_nDONE)
  5132                           
  5133  0117  189D               	btfsc	29,1	;volatile
  5134  0118  2917               	goto	l132
  5135                           
  5136                           ;adc.c: 117: }
  5137                           ;adc.c: 120: return ((ADRESH << 8) + ADRESL);
  5138  0119  081C               	movf	28,w	;volatile
  5139  011A  00F1               	movwf	?_ADC_GetConversion+1
  5140  011B  081B               	movf	27,w	;volatile
  5141  011C  00F0               	movwf	?_ADC_GetConversion
  5142  011D  0008               	return
  5143  011E                     __end_of_ADC_GetConversion:	
  5144  007E                     btemp	set	126	;btemp
  5145  007E                     wtemp0	set	126


Data Sizes:
    Strings     53
    Constant    30
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     76      76
    BANK1            32      0       0

Pointer List with Targets:

    sprintf$390	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[17]), STR_2(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 40
		 -> addlog@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    addlog@tmp	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_1(CODE[19]), 

    sendString@str	PTR const unsigned char  size(1) Largest target is 40
		 -> addlog@buf(BANK0[40]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _sendString->_EUSART_Write
    ___lwtoft->___ftpack
    ___fttol->___lwtoft
    ___ftmul->___lwtoft

Critical Paths under _main in BANK0

    _main->_addlog
    _addlog->___fttol
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    9541
                                             74 BANK0      2     2      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                            ___ftmul
                            ___fttol
                           ___lwtoft
                             _addlog
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _delay_us                                             6     4      2     156
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _addlog                                              44    40      4    4499
                                             30 BANK0     44    40      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
                           ___lwtoft (ARG)
                         _sendString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             32    28      4    4148
                                              0 BANK0     28    24      4
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     220
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     546
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     156
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sendString                                           2     2      0      97
                                              1 COMMON     2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    2078
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     316
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    2446
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1992
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                   _EPWM1_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EPWM1_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _addlog
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _sendString (ARG)
       _EUSART_Write
     _sprintf (ARG)
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _delay_us

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4C      4C       6       95.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 03 22:41:33 2018

                 ___bmul@product 0072                      __CFG_CP$OFF 0000              ___wmul@multiplicand 0072  
                            l210 03D9                              l132 0117                              l212 03DB  
                            l213 03DD                              l214 03DF                              l216 03F6  
                            l233 0494                              l330 07D7                              l308 070C  
                            l172 0156                              l237 0496                              l166 0054  
                            l238 0497                              l263 0583                              l272 05C7  
                            l419 0126                              l292 06A5                              l268 05A5  
                            l580 023F                              l671 02DE                              l587 0252  
                            l588 025A                              _PR2 001B                     __CFG_CPD$OFF 0000  
                _TMR2_Initialize 004B                     __CFG_BORV$LO 0000                              wreg 0009  
                   __CFG_IESO$ON 0000                      _sprintf$390 002C                      _sprintf$383 0028  
                    _sprintf$384 002A                     __CFG_LVP$OFF 0000                             l2112 02D5  
                           l2104 02BA                             l2042 0325                             l2114 02E1  
                           l2106 02C8                             l2026 0167                             l2130 01DB  
                           l2036 030F                             l2028 0172                             l2070 0384  
                           l2054 0360                             l2118 02EF                             l1510 0120  
                           l1504 0094                             l2066 037C                             l2058 0368  
                           l1524 00C7                             l1700 0471                             l2086 028A  
                           l1710 04AE                             l1702 0491                             l1528 00CD  
                           l1720 04C0                             l1704 0499                             l1634 00B5  
                           l1554 01C9                             l1546 01AB                             l1570 017D  
                           l1810 05E9                             l1714 04BB                             l1548 01B7  
                           l1572 0189                             l1580 019E                             l1900 0700  
                           l1820 0611                             l1812 05F8                             l1740 0500  
                           l1724 04CB                             l1732 04E8                             l1716 04BD  
                           l1660 03FC                             l1652 03E0                             l1644 03D4  
                           l1558 01D2                             l1910 0719                             l1750 051F  
                           l1742 050B                             l1726 04D6                             l1576 0195  
                           l1840 0657                             l1832 0641                             l1816 0605  
                           l1736 04F5                             l1680 044A                             l1664 0407  
                           l1672 0432                             l1656 03E4                             l1834 0644  
                           l1826 0623                             l1746 0516                             l1754 0524  
                           l1940 0789                             l1932 074A                             l1916 0728  
                           l1852 0694                             l1772 0577                             l1756 054B  
                           l1934 0769                             l1950 07B5                             l1926 0744  
                           l1854 0697                             l1846 0675                             l1694 0470  
                           l1944 079A                             l1848 0678                             l1768 056C  
                           l1954 07C0                             l1866 06A9                             l1882 06D4  
                           l1890 06E8                             l1980 0226                             l1876 06C5  
                           l1964 03B1                             l1990 024C                             l1982 022B  
                           l1974 0215                             l1958 07E4                             l1894 06ED  
                           l1966 07F9                             l1978 021C                             l1988 0244  
                           STR_1 0141                             STR_2 00E7                             STR_3 00D6  
                           u1315 0127                             u1405 01C2                             u1325 012C  
                           _LATA 010C                             u2215 0261                             u2135 0221  
                           u1415 01CA                             u2305 0341                             u2155 023A  
                           u2325 0369                             u2405 0291                             u1445 0180  
                           u2085 07E2                             u1605 04B4                             u2175 0247  
                           u2335 036F                             u1375 01AE                             u1465 018F  
                           u2265 015C                             u2435 02BB                             u1395 01B8  
                           u1475 0196                             u1715 059E                             u2365 0385  
                           u2375 038B                             u2295 0331                             u2465 02D6  
                           u1745 05C0                             u1595 04A7                             u1845 0634  
                           u1775 05E2                             u1885 066D                             u1895 0687  
                           _TMR2 001A                             _WPUA 020C                     __CFG_WRT$OFF 0000  
                  __CFG_FCMEN$ON 0000                             _main 01D7                     ___ftpack@arg 0070  
                   ___ftpack@exp 0073                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E                    __CFG_BOREN$ON 0000  
                           start 0001                ___bmul@multiplier 0073                    __CFG_MCLRE$ON 0000  
                   ___ftmul@cntr 002E                     ___ftmul@sign 002F                     ___fttol@exp1 003D  
                   ___fttol@lval 0039                    __CFG_PLLEN$ON 0000                    ?_EUSART_Write 0070  
 __size_of_OSCILLATOR_Initialize 0006    __end_of_OSCILLATOR_Initialize 003C                            ?_main 0070  
                  __CFG_WDTE$OFF 0000                  __end_of___ftmul 03AB                  __end_of___fttol 02F8  
                          _T2CON 001C                  __end_of___lwdiv 01D7                  __end_of___lwmod 01A3  
                          _RCREG 0199                            _RCSTA 019D                            _TRISA 008C  
                          _TXREG 019A                            _TXSTA 019E                  __end_of_dpowers 0065  
                __end_of_isdigit 0096                    ___ftpack@sign 0074                            status 0003  
                          wtemp0 007E                  __end_of_sprintf 07FE                  _TMR2_StartTimer 0033  
                __initialization 07FE                     __end_of_main 020D                   ??_EUSART_Write 0070  
        __end_of_TMR2_Initialize 0053                           ??_main 007E                    ___fttol@sign1 0038  
                         _ADCON0 009D                           _ADCON1 009E                           _ADRESH 009C  
                         _ADRESL 009B                           _CCPR1H 0292                           _CCPR1L 0291  
                         _APFCON 011D                           _ANSELA 018C                 __end_of___ftpack 0271  
               __end_of___lwtoft 010A                           _OSCCON 0099                           _SPBRGH 019C  
                         _SPBRGL 019B                 __end_of_delay_us 0177                   __CFG_PWRTE$OFF 0000  
                         ___bmul 00C5                           _addlog 0096                           ___wmul 011E  
                 __CFG_STVREN$ON 0000                        ??___ftmul 0026                        ??___fttol 0034  
                      ??___lwdiv 0074                        ??___lwmod 007C            ___ftmul@f3_as_product 002B  
                      ??_isdigit 0070         ADC_GetConversion@channel 0073          __end_of_TMR2_StartTimer 0036  
                      ??_sprintf 0024                _SYSTEM_Initialize 003C          __end_of__initialization 07FE  
             ?_SYSTEM_Initialize 0070              ___bmul@multiplicand 0070                       ___ftmul@f1 0020  
                     ___ftmul@f2 0023                ?_EPWM1_Initialize 0070                       ___fttol@f1 0030  
                 __pcstackCOMMON 0070              ??_SYSTEM_Initialize 0070               ??_EPWM1_Initialize 0070  
               ?_TMR2_Initialize 0070                       ___lwtoft@c 0078                   _OPTION_REGbits 0095  
      __end_of_SYSTEM_Initialize 0043                     sprintf@width 0036             __end_of_EUSART_Write 005B  
                     __pmaintext 01D7                          ?___bmul 0070                          ?_addlog 003E  
                        ?___wmul 0070                          _CCP1CON 0293                          _ECCP1AS 0295  
                        _BAUDCON 019F                        ?___ftpack 0070          __size_of_ADC_Initialize 0008  
                      ?___lwtoft 0078                       addlog@data 0040                        ?_delay_us 0070  
                        _OSCSTAT 009A                          _OSCTUNE 0098                          _PWM1CON 0294  
               ?_TMR2_StartTimer 0070                  __size_of___bmul 0011                  __size_of_addlog 000E  
                __size_of___wmul 001B                          ___ftmul 02F8                          ___fttol 0271  
                        ___lwdiv 01A3                          ___lwmod 0177                       ??___ftpack 0075  
                        __ptext1 0154                          __ptext2 0096                          __ptext3 03AB  
                        __ptext4 0088                          __ptext5 011E                          __ptext6 0177  
                        __ptext7 01A3                          __ptext8 00C5                          __ptext9 00B4  
                     ??___lwtoft 007B                __end_of_hexpowers 0141                          _dpowers 005B  
          _OSCILLATOR_Initialize 0036                        _T2CONbits 001C                          _isdigit 0088  
       ??_PIN_MANAGER_Initialize 0070                       ??_delay_us 0072       __size_of_SYSTEM_Initialize 0007  
                        _sprintf 03AB             end_of_initialization 07FE                __end_of_octpowers 0088  
                     _sendString 00B4                _EUSART_Initialize 0070               ?_EUSART_Initialize 0070  
                      _RCSTAbits 019D              ??_EUSART_Initialize 0070                    sendString@str 0072  
               __CFG_FOSC$INTOSC 0000            __size_of_EUSART_Write 0008                       main@adcval 006A  
      __end_of_EUSART_Initialize 007C                      ___ftmul@exp 002A                   __end_of___bmul 00D6  
                 __end_of_addlog 00A4                   __end_of___wmul 0139                     _EUSART_Write 0053  
                 _ADC_Initialize 0043           ?_OSCILLATOR_Initialize 0070              start_initialization 07FE  
      __size_of_EPWM1_Initialize 000B  __size_of_PIN_MANAGER_Initialize 0010                      ?_sendString 0070  
                       ??___bmul 0071                         ??_addlog 007E                         ??___wmul 0074  
         __end_of_ADC_Initialize 004B                __size_of___ftpack 0064                        ___latbits 0000  
              __size_of___lwtoft 0012                    __pcstackBANK0 0020         __size_of_TMR2_Initialize 0008  
              __size_of_delay_us 0023       __size_of_EUSART_Initialize 000C                      sprintf@flag 003A  
                    sprintf@prec 0035                 ___lwdiv@dividend 0072           _PIN_MANAGER_Initialize 00A4  
                       ?___ftmul 0020                         ?___fttol 0030                         ?___lwdiv 0070  
                       ?___lwmod 0078                  ?_ADC_Initialize 0070                        addlog@buf 0042  
                      addlog@tmp 003E              __size_of_sendString 0011                         ?_isdigit 0070  
                      _hexpowers 0139                 ___lwdiv@quotient 0075                         ?_sprintf 0020  
                 ___wmul@product 0074                        delay_us@i 0072                        delay_us@j 0074  
                      delay_us@t 0070                        _octpowers 007C         __size_of_TMR2_StartTimer 0003  
                       _PIR1bits 0011                         _PSTR1CON 0296                       _ADCON0bits 009D  
              ___wmul@multiplier 0070                 _EPWM1_Initialize 0065                ??_TMR2_Initialize 0070  
              _ADC_GetConversion 010A          ??_OSCILLATOR_Initialize 0070               ?_ADC_GetConversion 0070  
               __size_of___ftmul 00B3                 __size_of___fttol 0087                 __size_of___lwdiv 0034  
               __size_of___lwmod 002C                         ___ftpack 020D                      _isdigit$576 0070  
                       ___lwtoft 00F8              ??_ADC_GetConversion 0072                       sprintf@idx 002E  
                     sprintf@len 0030                       sprintf@val 0033                 __size_of_isdigit 000E  
                       _delay_us 0154                  ___lwdiv@divisor 0070                  ___lwdiv@counter 0077  
                       __ptext10 0053                         __ptext11 00F8                         __ptext20 0070  
                       __ptext12 0271                         __ptext21 0065                         __ptext13 02F8  
                       __ptext22 0043                         __ptext14 020D                         __ptext23 010A  
                       __ptext15 003C                         __ptext16 004B                         __ptext17 0033  
                       __ptext18 00A4                         __ptext19 0036                 __size_of_sprintf 0453  
                   ??_sendString 0071                    __size_of_main 0036        __end_of_ADC_GetConversion 011E  
              ??_TMR2_StartTimer 0070               __end_of_sendString 00C5                         isdigit@c 0071  
                      sprintf@ap 0032                        sprintf@cp 002F                        sprintf@sp 0039  
               ___lwmod@dividend 007A          ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000  
               ??_ADC_Initialize 0070                    __pstringtext1 007C                    __pstringtext2 005B  
                  __pstringtext3 0139                    __pstringtext4 00E7                    __pstringtext5 00D6  
                  __pstringtext6 0000                         sprintf@c 0038                         sprintf@f 0020  
                ___lwmod@divisor 0078                  ___lwmod@counter 007D               EUSART_Write@txData 0070  
 __end_of_PIN_MANAGER_Initialize 00B4       __size_of_ADC_GetConversion 0014         __end_of_EPWM1_Initialize 0070  
